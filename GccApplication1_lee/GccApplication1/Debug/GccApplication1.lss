
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000012c4  00001358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016f  00800122  00800122  0000137a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147c  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a93  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abd  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ef  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006f6  00000000  00000000  00004beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000052e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ae c0       	rjmp	.+348    	; 0x19e <__vector_16>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	8b c0       	rjmp	.+278    	; 0x160 <__vector_18>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ec       	ldi	r30, 0xC4	; 196
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 32       	cpi	r26, 0x22	; 34
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	22 e0       	ldi	r18, 0x02	; 2
      b4:	a2 e2       	ldi	r26, 0x22	; 34
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 39       	cpi	r26, 0x91	; 145
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	29 d5       	rcall	.+2642   	; 0xb16 <main>
      c4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <SetDutyCW>:
volatile double Ki_c = 2150;


void SetDutyCW(double v){
   
   while(TCNT1  == 0);
      ca:	2c b5       	in	r18, 0x2c	; 44
      cc:	3d b5       	in	r19, 0x2d	; 45
      ce:	23 2b       	or	r18, r19
      d0:	e1 f3       	breq	.-8      	; 0xca <SetDutyCW>

   int ocr = v * (200. / 24.) + 200;
      d2:	25 e5       	ldi	r18, 0x55	; 85
      d4:	35 e5       	ldi	r19, 0x55	; 85
      d6:	45 e0       	ldi	r20, 0x05	; 5
      d8:	51 e4       	ldi	r21, 0x41	; 65
      da:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__mulsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	48 e4       	ldi	r20, 0x48	; 72
      e4:	53 e4       	ldi	r21, 0x43	; 67
      e6:	d2 d6       	rcall	.+3492   	; 0xe8c <__addsf3>
      e8:	a1 d7       	rcall	.+3906   	; 0x102c <__fixsfsi>
   
   if(ocr > OCR_MAX)   ocr = OCR_MAX;
      ea:	67 38       	cpi	r22, 0x87	; 135
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	78 07       	cpc	r23, r24
      f0:	34 f4       	brge	.+12     	; 0xfe <SetDutyCW+0x34>
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
      f2:	6a 30       	cpi	r22, 0x0A	; 10
      f4:	71 05       	cpc	r23, r1
      f6:	2c f4       	brge	.+10     	; 0x102 <SetDutyCW+0x38>
      f8:	6a e0       	ldi	r22, 0x0A	; 10
      fa:	70 e0       	ldi	r23, 0x00	; 0
      fc:	02 c0       	rjmp	.+4      	; 0x102 <SetDutyCW+0x38>
   
   while(TCNT1  == 0);

   int ocr = v * (200. / 24.) + 200;
   
   if(ocr > OCR_MAX)   ocr = OCR_MAX;
      fe:	66 e8       	ldi	r22, 0x86	; 134
     100:	71 e0       	ldi	r23, 0x01	; 1
   else if(ocr < OCR_MIN)   ocr = OCR_MIN;
   //OCR1A = OCR1B = ocr;
   
   OCR1A = OCR3B = ocr + 8;      //1 H
     102:	cb 01       	movw	r24, r22
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     10a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     10e:	9b bd       	out	0x2b, r25	; 43
     110:	8a bd       	out	0x2a, r24	; 42
   OCR1B = OCR3A = ocr - 8;      //1 L
     112:	68 50       	subi	r22, 0x08	; 8
     114:	71 09       	sbc	r23, r1
     116:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     11a:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     11e:	79 bd       	out	0x29, r23	; 41
     120:	68 bd       	out	0x28, r22	; 40
     122:	08 95       	ret

00000124 <InitLS7366>:
}


void InitLS7366(){
     124:	cf 93       	push	r28
   
   PORTB = 0x00;
     126:	18 ba       	out	0x18, r1	; 24
   SPI_MasterSend(SELECT_MDR0 | WR_REG);
     128:	88 e8       	ldi	r24, 0x88	; 136
     12a:	a5 d6       	rcall	.+3402   	; 0xe76 <SPI_MasterSend>
   SPI_MasterSend(X4_QUAD | FREE_RUN | DISABLE_INDEX | SYNCHRONOUS_INDEX |FILTER_CDF_1);
     12c:	83 e4       	ldi	r24, 0x43	; 67
     12e:	a3 d6       	rcall	.+3398   	; 0xe76 <SPI_MasterSend>
   PORTB = 0x01;
     130:	c1 e0       	ldi	r28, 0x01	; 1
     132:	c8 bb       	out	0x18, r28	; 24
   
   PORTB = 0x00;
   SPI_MasterSend(SELECT_MDR1 | WR_REG);
     134:	18 ba       	out	0x18, r1	; 24
     136:	80 e9       	ldi	r24, 0x90	; 144
   SPI_MasterSend(FOUR_BYTE_COUNT_MODE | ENABLE_COUNTING);
     138:	9e d6       	rcall	.+3388   	; 0xe76 <SPI_MasterSend>
     13a:	80 e0       	ldi	r24, 0x00	; 0
   PORTB = 0x01;
     13c:	9c d6       	rcall	.+3384   	; 0xe76 <SPI_MasterSend>
   
   PORTB = 0x00;
     13e:	c8 bb       	out	0x18, r28	; 24
   SPI_MasterSend(SELECT_CNTR | CLR_REG);
     140:	18 ba       	out	0x18, r1	; 24
     142:	80 e2       	ldi	r24, 0x20	; 32
     144:	98 d6       	rcall	.+3376   	; 0xe76 <SPI_MasterSend>
   PORTB = 0x01;
     146:	c8 bb       	out	0x18, r28	; 24
}
     148:	cf 91       	pop	r28
     14a:	08 95       	ret

0000014c <getADC>:



int getADC(char ch){

   ADMUX = (ADMUX & 0xf0) + ch;
     14c:	97 b1       	in	r25, 0x07	; 7
     14e:	90 7f       	andi	r25, 0xF0	; 240
     150:	89 0f       	add	r24, r25
     152:	87 b9       	out	0x07, r24	; 7
   ADCSRA |= 0x40;
     154:	36 9a       	sbi	0x06, 6	; 6
   while(!(ADCSRA & 0x10));
     156:	34 9b       	sbis	0x06, 4	; 6
     158:	fe cf       	rjmp	.-4      	; 0x156 <getADC+0xa>
   return ADC;
     15a:	84 b1       	in	r24, 0x04	; 4
     15c:	95 b1       	in	r25, 0x05	; 5
}
     15e:	08 95       	ret

00000160 <__vector_18>:




ISR(USART0_RX_vect){
     160:	1f 92       	push	r1
     162:	0f 92       	push	r0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	0f 92       	push	r0
     168:	11 24       	eor	r1, r1
     16a:	0b b6       	in	r0, 0x3b	; 59
     16c:	0f 92       	push	r0
     16e:	8f 93       	push	r24
     170:	ef 93       	push	r30
     172:	ff 93       	push	r31

   g_buf[g_BufWriteCnt++] = UDR0;
     174:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <g_BufWriteCnt>
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	8e 0f       	add	r24, r30
     17c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <g_BufWriteCnt>
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	8c b1       	in	r24, 0x0c	; 12
     184:	e4 5d       	subi	r30, 0xD4	; 212
     186:	fe 4f       	sbci	r31, 0xFE	; 254
     188:	80 83       	st	Z, r24
}
     18a:	ff 91       	pop	r31
     18c:	ef 91       	pop	r30
     18e:	8f 91       	pop	r24
     190:	0f 90       	pop	r0
     192:	0b be       	out	0x3b, r0	; 59
     194:	0f 90       	pop	r0
     196:	0f be       	out	0x3f, r0	; 63
     198:	0f 90       	pop	r0
     19a:	1f 90       	pop	r1
     19c:	18 95       	reti

0000019e <__vector_16>:




ISR(TIMER0_OVF_vect){
     19e:	1f 92       	push	r1
     1a0:	0f 92       	push	r0
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	0f 92       	push	r0
     1a6:	11 24       	eor	r1, r1
     1a8:	0b b6       	in	r0, 0x3b	; 59
     1aa:	0f 92       	push	r0
     1ac:	4f 92       	push	r4
     1ae:	5f 92       	push	r5
     1b0:	6f 92       	push	r6
     1b2:	7f 92       	push	r7
     1b4:	8f 92       	push	r8
     1b6:	9f 92       	push	r9
     1b8:	af 92       	push	r10
     1ba:	bf 92       	push	r11
     1bc:	cf 92       	push	r12
     1be:	df 92       	push	r13
     1c0:	ef 92       	push	r14
     1c2:	ff 92       	push	r15
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	4f 93       	push	r20
     1ca:	5f 93       	push	r21
     1cc:	6f 93       	push	r22
     1ce:	7f 93       	push	r23
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
     1d4:	af 93       	push	r26
     1d6:	bf 93       	push	r27
     1d8:	ef 93       	push	r30
     1da:	ff 93       	push	r31
     1dc:	cf 93       	push	r28
     1de:	df 93       	push	r29
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	28 97       	sbiw	r28, 0x08	; 8
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
	// 안티 게인 설정
   double Ka_s = 1/2*Kp_s;
     1ea:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <Kp_s>
     1ee:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <Kp_s+0x1>
     1f2:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <Kp_s+0x2>
     1f6:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <Kp_s+0x3>
   double Ka_c = 1/2*Kp_c;
     1fa:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <Kp_c>
     1fe:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <Kp_c+0x1>
     202:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Kp_c+0x2>
     206:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <Kp_c+0x3>
     20a:	20 e0       	ldi	r18, 0x00	; 0
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	a9 01       	movw	r20, r18
     210:	f4 d7       	rcall	.+4072   	; 0x11fa <__mulsf3>
     212:	6d 83       	std	Y+5, r22	; 0x05
     214:	7e 83       	std	Y+6, r23	; 0x06
     216:	8f 83       	std	Y+7, r24	; 0x07
     218:	98 87       	std	Y+8, r25	; 0x08
   TCNT0 = 256 - 125;
     21a:	83 e8       	ldi	r24, 0x83	; 131
     21c:	82 bf       	out	0x32, r24	; 50
   //Read LS7366
   int32_t cnt;
   
   PORTC = 0x01;
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	25 bb       	out	0x15, r18	; 21
   
   g_ADC = getADC(0);
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	93 df       	rcall	.-218    	; 0x14c <getADC>
     226:	bc 01       	movw	r22, r24
     228:	99 0f       	add	r25, r25
     22a:	88 0b       	sbc	r24, r24
     22c:	99 0b       	sbc	r25, r25
     22e:	31 d7       	rcall	.+3682   	; 0x1092 <__floatsisf>
     230:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <g_ADC>
     234:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <g_ADC+0x1>
     238:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <g_ADC+0x2>
     23c:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <g_ADC+0x3>
   
   PORTB = 0x00;
   SPI_MasterSend(SELECT_OTR | LOAD_REG);
     240:	18 ba       	out	0x18, r1	; 24
     242:	88 ee       	ldi	r24, 0xE8	; 232
     244:	18 d6       	rcall	.+3120   	; 0xe76 <SPI_MasterSend>
   PORTB = 0x01;
     246:	81 e0       	ldi	r24, 0x01	; 1
         
   PORTB = 0x00;
   SPI_MasterSend(SELECT_OTR | RD_REG);
     248:	88 bb       	out	0x18, r24	; 24
     24a:	18 ba       	out	0x18, r1	; 24
     24c:	88 e6       	ldi	r24, 0x68	; 104
   cnt = SPI_MasterRecv();      cnt = cnt<< 8;
     24e:	13 d6       	rcall	.+3110   	; 0xe76 <SPI_MasterSend>
     250:	17 d6       	rcall	.+3118   	; 0xe80 <SPI_MasterRecv>
     252:	88 2e       	mov	r8, r24
     254:	91 2c       	mov	r9, r1
     256:	a1 2c       	mov	r10, r1
     258:	b1 2c       	mov	r11, r1
     25a:	ba 2c       	mov	r11, r10
     25c:	a9 2c       	mov	r10, r9
     25e:	98 2c       	mov	r9, r8
   cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     260:	88 24       	eor	r8, r8
     262:	0e d6       	rcall	.+3100   	; 0xe80 <SPI_MasterRecv>
     264:	88 2a       	or	r8, r24
     266:	ba 2c       	mov	r11, r10
     268:	a9 2c       	mov	r10, r9
     26a:	98 2c       	mov	r9, r8
   cnt |= SPI_MasterRecv();   cnt = cnt<< 8;
     26c:	88 24       	eor	r8, r8
     26e:	08 d6       	rcall	.+3088   	; 0xe80 <SPI_MasterRecv>
     270:	88 2a       	or	r8, r24
     272:	ba 2c       	mov	r11, r10
     274:	a9 2c       	mov	r10, r9
     276:	98 2c       	mov	r9, r8
   cnt |= SPI_MasterRecv();
     278:	88 24       	eor	r8, r8
     27a:	02 d6       	rcall	.+3076   	; 0xe80 <SPI_MasterRecv>
   PORTB = 0x01;
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	98 bb       	out	0x18, r25	; 24
   g_Cnt = -cnt;
     280:	88 2a       	or	r8, r24
     282:	b0 94       	com	r11
     284:	a0 94       	com	r10
     286:	90 94       	com	r9
     288:	80 94       	com	r8
     28a:	81 1c       	adc	r8, r1
     28c:	91 1c       	adc	r9, r1
     28e:	a1 1c       	adc	r10, r1
     290:	b1 1c       	adc	r11, r1
     292:	80 92 77 02 	sts	0x0277, r8	; 0x800277 <g_Cnt>
     296:	90 92 78 02 	sts	0x0278, r9	; 0x800278 <g_Cnt+0x1>
     29a:	a0 92 79 02 	sts	0x0279, r10	; 0x800279 <g_Cnt+0x2>
     29e:	b0 92 7a 02 	sts	0x027A, r11	; 0x80027a <g_Cnt+0x3>
   
   PORTC = 0x03;
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	85 bb       	out	0x15, r24	; 21
   g_Pcur = (g_Cnt / (4096. * 81.)) * 2 * M_PI;
     2a6:	60 91 77 02 	lds	r22, 0x0277	; 0x800277 <g_Cnt>
     2aa:	70 91 78 02 	lds	r23, 0x0278	; 0x800278 <g_Cnt+0x1>
     2ae:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <g_Cnt+0x2>
     2b2:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <g_Cnt+0x3>
     2b6:	ed d6       	rcall	.+3546   	; 0x1092 <__floatsisf>
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	42 ea       	ldi	r20, 0xA2	; 162
     2be:	58 e4       	ldi	r21, 0x48	; 72
     2c0:	4d d6       	rcall	.+3226   	; 0xf5c <__divsf3>
     2c2:	9b 01       	movw	r18, r22
     2c4:	ac 01       	movw	r20, r24
     2c6:	e2 d5       	rcall	.+3012   	; 0xe8c <__addsf3>
     2c8:	2b ed       	ldi	r18, 0xDB	; 219
     2ca:	3f e0       	ldi	r19, 0x0F	; 15
     2cc:	49 e4       	ldi	r20, 0x49	; 73
     2ce:	50 e4       	ldi	r21, 0x40	; 64
     2d0:	94 d7       	rcall	.+3880   	; 0x11fa <__mulsf3>
     2d2:	60 93 7c 02 	sts	0x027C, r22	; 0x80027c <g_Pcur>
     2d6:	70 93 7d 02 	sts	0x027D, r23	; 0x80027d <g_Pcur+0x1>
     2da:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <g_Pcur+0x2>
     2de:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <g_Pcur+0x3>
   //TO DO

   /////////////////////////////////////////
    //position control
    if((g_TimerCnt % 100) == 0){  
     2e2:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <g_TimerCnt>
     2e6:	89 e2       	ldi	r24, 0x29	; 41
     2e8:	98 9f       	mul	r25, r24
     2ea:	81 2d       	mov	r24, r1
     2ec:	11 24       	eor	r1, r1
     2ee:	82 95       	swap	r24
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	24 e6       	ldi	r18, 0x64	; 100
     2f4:	82 9f       	mul	r24, r18
     2f6:	90 19       	sub	r25, r0
     2f8:	11 24       	eor	r1, r1
     2fa:	91 11       	cpse	r25, r1
     2fc:	ca c0       	rjmp	.+404    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
       // 위치 제어기는 전류제어기 주기의 1/100으로 잡는다.
	   g_TimerCnt = 0;
     2fe:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <g_TimerCnt>
       if(g_Pdes < 0) g_Pdes + 2*M_PI;   // 음수 target시 0~360으로 표현
     302:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pdes>
     306:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pdes+0x1>
     30a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pdes+0x2>
     30e:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pdes+0x3>
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	a9 01       	movw	r20, r18
     318:	1d d6       	rcall	.+3130   	; 0xf54 <__cmpsf2>
     31a:	88 23       	and	r24, r24
     31c:	44 f4       	brge	.+16     	; 0x32e <__vector_16+0x190>
     31e:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <g_Pdes>
     322:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <g_Pdes+0x1>
     326:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <g_Pdes+0x2>
     32a:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <g_Pdes+0x3>
       
       g_Perr = g_Pdes - (g_Pcur);      // 목표 위치 값 - 현재 위치 값 = position error 
     32e:	60 91 8c 02 	lds	r22, 0x028C	; 0x80028c <g_Pdes>
     332:	70 91 8d 02 	lds	r23, 0x028D	; 0x80028d <g_Pdes+0x1>
     336:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <g_Pdes+0x2>
     33a:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <g_Pdes+0x3>
     33e:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <g_Pcur>
     342:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <g_Pcur+0x1>
     346:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <g_Pcur+0x2>
     34a:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <g_Pcur+0x3>
     34e:	9d d5       	rcall	.+2874   	; 0xe8a <__subsf3>
     350:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <g_Perr>
     354:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <g_Perr+0x1>
     358:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <g_Perr+0x2>
     35c:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <g_Perr+0x3>
       g_Pderr = g_Perr - g_Ppre;      // 현재 에러 값 - 이전 에러 값 = position error_dot
     360:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <g_Perr>
     364:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <g_Perr+0x1>
     368:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <g_Perr+0x2>
     36c:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <g_Perr+0x3>
     370:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <g_Ppre>
     374:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <g_Ppre+0x1>
     378:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <g_Ppre+0x2>
     37c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <g_Ppre+0x3>
     380:	84 d5       	rcall	.+2824   	; 0xe8a <__subsf3>
     382:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <g_Pderr>
     386:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <g_Pderr+0x1>
     38a:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <g_Pderr+0x2>
     38e:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <g_Pderr+0x3>
       
       g_pos_control = g_Perr * Kp_p +  g_Pderr* Kd_p;      //PD 제어기
     392:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <g_Perr>
     396:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <g_Perr+0x1>
     39a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <g_Perr+0x2>
     39e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <g_Perr+0x3>
     3a2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Kp_p>
     3a6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <Kp_p+0x1>
     3aa:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <Kp_p+0x2>
     3ae:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <Kp_p+0x3>
     3b2:	80 90 49 02 	lds	r8, 0x0249	; 0x800249 <g_Pderr>
     3b6:	90 90 4a 02 	lds	r9, 0x024A	; 0x80024a <g_Pderr+0x1>
     3ba:	a0 90 4b 02 	lds	r10, 0x024B	; 0x80024b <g_Pderr+0x2>
     3be:	b0 90 4c 02 	lds	r11, 0x024C	; 0x80024c <g_Pderr+0x3>
     3c2:	40 90 10 01 	lds	r4, 0x0110	; 0x800110 <Kd_p>
     3c6:	50 90 11 01 	lds	r5, 0x0111	; 0x800111 <Kd_p+0x1>
     3ca:	60 90 12 01 	lds	r6, 0x0112	; 0x800112 <Kd_p+0x2>
     3ce:	70 90 13 01 	lds	r7, 0x0113	; 0x800113 <Kd_p+0x3>
     3d2:	13 d7       	rcall	.+3622   	; 0x11fa <__mulsf3>
     3d4:	69 83       	std	Y+1, r22	; 0x01
     3d6:	7a 83       	std	Y+2, r23	; 0x02
     3d8:	8b 83       	std	Y+3, r24	; 0x03
     3da:	9c 83       	std	Y+4, r25	; 0x04
     3dc:	a3 01       	movw	r20, r6
     3de:	92 01       	movw	r18, r4
     3e0:	c5 01       	movw	r24, r10
     3e2:	b4 01       	movw	r22, r8
     3e4:	0a d7       	rcall	.+3604   	; 0x11fa <__mulsf3>
     3e6:	9b 01       	movw	r18, r22
     3e8:	ac 01       	movw	r20, r24
     3ea:	69 81       	ldd	r22, Y+1	; 0x01
     3ec:	7a 81       	ldd	r23, Y+2	; 0x02
     3ee:	8b 81       	ldd	r24, Y+3	; 0x03
     3f0:	9c 81       	ldd	r25, Y+4	; 0x04
     3f2:	4c d5       	rcall	.+2712   	; 0xe8c <__addsf3>
     3f4:	60 93 6f 02 	sts	0x026F, r22	; 0x80026f <g_pos_control>
     3f8:	70 93 70 02 	sts	0x0270, r23	; 0x800270 <g_pos_control+0x1>
     3fc:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <g_pos_control+0x2>
     400:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <g_pos_control+0x3>
	   //
       if(g_pos_control > 642.65/81.){
     404:	60 91 6f 02 	lds	r22, 0x026F	; 0x80026f <g_pos_control>
     408:	70 91 70 02 	lds	r23, 0x0270	; 0x800270 <g_pos_control+0x1>
     40c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_pos_control+0x2>
     410:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_pos_control+0x3>
     414:	2d ee       	ldi	r18, 0xED	; 237
     416:	32 ee       	ldi	r19, 0xE2	; 226
     418:	4d ef       	ldi	r20, 0xFD	; 253
     41a:	50 e4       	ldi	r21, 0x40	; 64
     41c:	ea d6       	rcall	.+3540   	; 0x11f2 <__gesf2>
     41e:	18 16       	cp	r1, r24
     420:	6c f4       	brge	.+26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
          g_pos_control = 642.65/81.;
     422:	8d ee       	ldi	r24, 0xED	; 237
     424:	92 ee       	ldi	r25, 0xE2	; 226
     426:	ad ef       	ldi	r26, 0xFD	; 253
     428:	b0 e4       	ldi	r27, 0x40	; 64
     42a:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <g_pos_control>
     42e:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <g_pos_control+0x1>
     432:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <g_pos_control+0x2>
     436:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <g_pos_control+0x3>
       }
       else if(g_pos_control < -642.65/81.){
     43a:	1b c0       	rjmp	.+54     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     43c:	60 91 6f 02 	lds	r22, 0x026F	; 0x80026f <g_pos_control>
     440:	70 91 70 02 	lds	r23, 0x0270	; 0x800270 <g_pos_control+0x1>
     444:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_pos_control+0x2>
     448:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_pos_control+0x3>
     44c:	2d ee       	ldi	r18, 0xED	; 237
     44e:	32 ee       	ldi	r19, 0xE2	; 226
     450:	4d ef       	ldi	r20, 0xFD	; 253
     452:	50 ec       	ldi	r21, 0xC0	; 192
     454:	7f d5       	rcall	.+2814   	; 0xf54 <__cmpsf2>
     456:	88 23       	and	r24, r24
     458:	64 f4       	brge	.+24     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
          g_pos_control = -642.65/81.;
     45a:	8d ee       	ldi	r24, 0xED	; 237
     45c:	92 ee       	ldi	r25, 0xE2	; 226
     45e:	ad ef       	ldi	r26, 0xFD	; 253
     460:	b0 ec       	ldi	r27, 0xC0	; 192
     462:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <g_pos_control>
     466:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <g_pos_control+0x1>
     46a:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <g_pos_control+0x2>
     46e:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <g_pos_control+0x3>
       }
       g_Ppre = g_Perr;      // 현재 위치 에러 값을 이전 위치 에러 값으로 저장
     472:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <g_Perr>
     476:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <g_Perr+0x1>
     47a:	a0 91 2e 02 	lds	r26, 0x022E	; 0x80022e <g_Perr+0x2>
     47e:	b0 91 2f 02 	lds	r27, 0x022F	; 0x80022f <g_Perr+0x3>
     482:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <g_Ppre>
     486:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <g_Ppre+0x1>
     48a:	a0 93 64 02 	sts	0x0264, r26	; 0x800264 <g_Ppre+0x2>
     48e:	b0 93 65 02 	sts	0x0265, r27	; 0x800265 <g_Ppre+0x3>
    }
      // speed control
    if((g_TimerCnt % 10) == 0){       
     492:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <g_TimerCnt>
     496:	8d ec       	ldi	r24, 0xCD	; 205
     498:	28 9f       	mul	r18, r24
     49a:	81 2d       	mov	r24, r1
     49c:	11 24       	eor	r1, r1
     49e:	86 95       	lsr	r24
     4a0:	86 95       	lsr	r24
     4a2:	86 95       	lsr	r24
     4a4:	88 0f       	add	r24, r24
     4a6:	98 2f       	mov	r25, r24
     4a8:	99 0f       	add	r25, r25
     4aa:	99 0f       	add	r25, r25
     4ac:	89 0f       	add	r24, r25
     4ae:	28 13       	cpse	r18, r24
       
      //saturation
	  // 속도에서 입력받는 값은 속도의 최대값이므로 만약에 속도지령이 속도 최대값을 넘길경우 제한해줌
       if(g_pos_control > g_Vlimit){
     4b0:	84 c1       	rjmp	.+776    	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     4b2:	60 91 6f 02 	lds	r22, 0x026F	; 0x80026f <g_pos_control>
     4b6:	70 91 70 02 	lds	r23, 0x0270	; 0x800270 <g_pos_control+0x1>
     4ba:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <g_pos_control+0x2>
     4be:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <g_pos_control+0x3>
     4c2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <g_Vlimit>
     4c6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <g_Vlimit+0x1>
     4ca:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <g_Vlimit+0x2>
     4ce:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <g_Vlimit+0x3>
     4d2:	8f d6       	rcall	.+3358   	; 0x11f2 <__gesf2>
     4d4:	18 16       	cp	r1, r24
     4d6:	8c f4       	brge	.+34     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
          g_pos_control = g_Vlimit;
     4d8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     4dc:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     4e0:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     4e4:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     4e8:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <g_pos_control>
     4ec:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <g_pos_control+0x1>
     4f0:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <g_pos_control+0x2>
     4f4:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <g_pos_control+0x3>
       }
       else if(g_pos_control < -g_Vlimit){
     4f8:	27 c0       	rjmp	.+78     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
     4fa:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     4fe:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     502:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     506:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     50a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <g_pos_control>
     50e:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <g_pos_control+0x1>
     512:	40 91 71 02 	lds	r20, 0x0271	; 0x800271 <g_pos_control+0x2>
     516:	50 91 72 02 	lds	r21, 0x0272	; 0x800272 <g_pos_control+0x3>
     51a:	bc 01       	movw	r22, r24
     51c:	cd 01       	movw	r24, r26
     51e:	90 58       	subi	r25, 0x80	; 128
     520:	68 d6       	rcall	.+3280   	; 0x11f2 <__gesf2>
     522:	18 16       	cp	r1, r24
     524:	8c f4       	brge	.+34     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
          g_pos_control = -g_Vlimit;
     526:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <g_Vlimit>
     52a:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <g_Vlimit+0x1>
     52e:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <g_Vlimit+0x2>
     532:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <g_Vlimit+0x3>
     536:	b0 58       	subi	r27, 0x80	; 128
     538:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <g_pos_control>
     53c:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <g_pos_control+0x1>
     540:	a0 93 71 02 	sts	0x0271, r26	; 0x800271 <g_pos_control+0x2>
     544:	b0 93 72 02 	sts	0x0272, r27	; 0x800272 <g_pos_control+0x3>



ISR(TIMER0_OVF_vect){
	// 안티 게인 설정
   double Ka_s = 1/2*Kp_s;
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	a9 01       	movw	r20, r18
     54e:	c7 01       	movw	r24, r14
     550:	b6 01       	movw	r22, r12
     552:	53 d6       	rcall	.+3238   	; 0x11fa <__mulsf3>
     554:	69 83       	std	Y+1, r22	; 0x01
     556:	7a 83       	std	Y+2, r23	; 0x02
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	9c 83       	std	Y+4, r25	; 0x04
       }
       else if(g_pos_control < -g_Vlimit){
          g_pos_control = -g_Vlimit;
       }
       
       g_Vdes = g_pos_control;  // 목표하는 속도
     55c:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <g_pos_control>
     560:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <g_pos_control+0x1>
     564:	a0 91 71 02 	lds	r26, 0x0271	; 0x800271 <g_pos_control+0x2>
     568:	b0 91 72 02 	lds	r27, 0x0272	; 0x800272 <g_pos_control+0x3>
     56c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <g_Vdes>
     570:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <g_Vdes+0x1>
     574:	a0 93 82 02 	sts	0x0282, r26	; 0x800282 <g_Vdes+0x2>
     578:	b0 93 83 02 	sts	0x0283, r27	; 0x800283 <g_Vdes+0x3>
       g_Vcur = (g_Pcur - g_Pvcur) / 0.005; //현재 속도 = 위치의 변화량 / (제어주기*10)
     57c:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <g_Pcur>
     580:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <g_Pcur+0x1>
     584:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_Pcur+0x2>
     588:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_Pcur+0x3>
     58c:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <g_Pvcur>
     590:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <g_Pvcur+0x1>
     594:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <g_Pvcur+0x2>
     598:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <g_Pvcur+0x3>
     59c:	76 d4       	rcall	.+2284   	; 0xe8a <__subsf3>
     59e:	2a e0       	ldi	r18, 0x0A	; 10
     5a0:	37 ed       	ldi	r19, 0xD7	; 215
     5a2:	43 ea       	ldi	r20, 0xA3	; 163
     5a4:	5b e3       	ldi	r21, 0x3B	; 59
     5a6:	da d4       	rcall	.+2484   	; 0xf5c <__divsf3>
     5a8:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <g_Vcur>
     5ac:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <g_Vcur+0x1>
     5b0:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <g_Vcur+0x2>
     5b4:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <g_Vcur+0x3>
     5b8:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <g_Pcur>
	   // 현재 제어주기가 0.000521 ~= 0.0005 이므로 시간변화량은 0.0005이다.
	   // 속도제어기의 제어주기는 전류제어기의 1/10 주기로 잡는다.   
       g_Pvcur = g_Pcur;           //
     5bc:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <g_Pcur+0x1>
     5c0:	a0 91 7e 02 	lds	r26, 0x027E	; 0x80027e <g_Pcur+0x2>
     5c4:	b0 91 7f 02 	lds	r27, 0x027F	; 0x80027f <g_Pcur+0x3>
     5c8:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <g_Pvcur>
     5cc:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <g_Pvcur+0x1>
     5d0:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <g_Pvcur+0x2>
     5d4:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <g_Pvcur+0x3>
       g_Verr = g_Vdes - g_Vcur; 
     5d8:	60 91 80 02 	lds	r22, 0x0280	; 0x800280 <g_Vdes>
     5dc:	70 91 81 02 	lds	r23, 0x0281	; 0x800281 <g_Vdes+0x1>
     5e0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <g_Vdes+0x2>
     5e4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <g_Vdes+0x3>
     5e8:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <g_Vcur>
     5ec:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <g_Vcur+0x1>
     5f0:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <g_Vcur+0x2>
     5f4:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <g_Vcur+0x3>
     5f8:	48 d4       	rcall	.+2192   	; 0xe8a <__subsf3>
     5fa:	60 93 73 02 	sts	0x0273, r22	; 0x800273 <g_Verr>
     5fe:	70 93 74 02 	sts	0x0274, r23	; 0x800274 <g_Verr+0x1>
     602:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <g_Verr+0x2>
     606:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <g_Verr+0x3>
     60a:	40 90 73 02 	lds	r4, 0x0273	; 0x800273 <g_Verr>
       
       g_vel_control = g_Verr * Kp_s + g_Verr_sum * Ki_s * 0.005;      // PI 제어기
     60e:	50 90 74 02 	lds	r5, 0x0274	; 0x800274 <g_Verr+0x1>
     612:	60 90 75 02 	lds	r6, 0x0275	; 0x800275 <g_Verr+0x2>
     616:	70 90 76 02 	lds	r7, 0x0276	; 0x800276 <g_Verr+0x3>
     61a:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <Kp_s>
     61e:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <Kp_s+0x1>
     622:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <Kp_s+0x2>
     626:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <Kp_s+0x3>
     62a:	60 91 44 02 	lds	r22, 0x0244	; 0x800244 <g_Verr_sum>
     62e:	70 91 45 02 	lds	r23, 0x0245	; 0x800245 <g_Verr_sum+0x1>
     632:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <g_Verr_sum+0x2>
     636:	90 91 47 02 	lds	r25, 0x0247	; 0x800247 <g_Verr_sum+0x3>
     63a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <Ki_s>
     63e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <Ki_s+0x1>
     642:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <Ki_s+0x2>
     646:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <Ki_s+0x3>
     64a:	d7 d5       	rcall	.+2990   	; 0x11fa <__mulsf3>
     64c:	2a e0       	ldi	r18, 0x0A	; 10
     64e:	37 ed       	ldi	r19, 0xD7	; 215
     650:	43 ea       	ldi	r20, 0xA3	; 163
     652:	5b e3       	ldi	r21, 0x3B	; 59
     654:	d2 d5       	rcall	.+2980   	; 0x11fa <__mulsf3>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
     65a:	a5 01       	movw	r20, r10
     65c:	94 01       	movw	r18, r8
     65e:	c3 01       	movw	r24, r6
     660:	b2 01       	movw	r22, r4
     662:	cb d5       	rcall	.+2966   	; 0x11fa <__mulsf3>
     664:	9b 01       	movw	r18, r22
     666:	ac 01       	movw	r20, r24
     668:	c7 01       	movw	r24, r14
     66a:	b6 01       	movw	r22, r12
     66c:	0f d4       	rcall	.+2078   	; 0xe8c <__addsf3>
     66e:	60 93 66 02 	sts	0x0266, r22	; 0x800266 <g_vel_control>
     672:	70 93 67 02 	sts	0x0267, r23	; 0x800267 <g_vel_control+0x1>
     676:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <g_vel_control+0x2>
     67a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <g_vel_control+0x3>
       // I-term은 에러의 합 * 시간변화량 * IGain 값이다.
       g_Verr_sum += g_Verr;   // 속도 값에 대한 에러 값을 계속 누적
     67e:	60 91 73 02 	lds	r22, 0x0273	; 0x800273 <g_Verr>
     682:	70 91 74 02 	lds	r23, 0x0274	; 0x800274 <g_Verr+0x1>
     686:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <g_Verr+0x2>
     68a:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <g_Verr+0x3>
     68e:	20 91 44 02 	lds	r18, 0x0244	; 0x800244 <g_Verr_sum>
     692:	30 91 45 02 	lds	r19, 0x0245	; 0x800245 <g_Verr_sum+0x1>
     696:	40 91 46 02 	lds	r20, 0x0246	; 0x800246 <g_Verr_sum+0x2>
     69a:	50 91 47 02 	lds	r21, 0x0247	; 0x800247 <g_Verr_sum+0x3>
     69e:	f6 d3       	rcall	.+2028   	; 0xe8c <__addsf3>
     6a0:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <g_Verr_sum>
     6a4:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <g_Verr_sum+0x1>
     6a8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <g_Verr_sum+0x2>
     6ac:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <g_Verr_sum+0x3>
       // 최대 허용 전류 값에 대한 saturation & anti-windup
       if(g_vel_control > 2.08){
     6b0:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_vel_control>
     6b4:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_vel_control+0x1>
     6b8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_vel_control+0x2>
     6bc:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_vel_control+0x3>
     6c0:	28 eb       	ldi	r18, 0xB8	; 184
     6c2:	3e e1       	ldi	r19, 0x1E	; 30
     6c4:	45 e0       	ldi	r20, 0x05	; 5
     6c6:	50 e4       	ldi	r21, 0x40	; 64
     6c8:	94 d5       	rcall	.+2856   	; 0x11f2 <__gesf2>
     6ca:	18 16       	cp	r1, r24
		  g_Verr_sum -= (g_vel_control - 2.08) * 1. *Ka_s;   //  anti windup gain은 1/2Kps
     6cc:	a4 f5       	brge	.+104    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
     6ce:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_vel_control>
     6d2:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_vel_control+0x1>
     6d6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_vel_control+0x2>
     6da:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_vel_control+0x3>
     6de:	c0 90 44 02 	lds	r12, 0x0244	; 0x800244 <g_Verr_sum>
     6e2:	d0 90 45 02 	lds	r13, 0x0245	; 0x800245 <g_Verr_sum+0x1>
     6e6:	e0 90 46 02 	lds	r14, 0x0246	; 0x800246 <g_Verr_sum+0x2>
     6ea:	f0 90 47 02 	lds	r15, 0x0247	; 0x800247 <g_Verr_sum+0x3>
     6ee:	28 eb       	ldi	r18, 0xB8	; 184
     6f0:	3e e1       	ldi	r19, 0x1E	; 30
     6f2:	45 e0       	ldi	r20, 0x05	; 5
     6f4:	50 e4       	ldi	r21, 0x40	; 64
     6f6:	c9 d3       	rcall	.+1938   	; 0xe8a <__subsf3>
     6f8:	29 81       	ldd	r18, Y+1	; 0x01
     6fa:	3a 81       	ldd	r19, Y+2	; 0x02
     6fc:	4b 81       	ldd	r20, Y+3	; 0x03
     6fe:	5c 81       	ldd	r21, Y+4	; 0x04
     700:	7c d5       	rcall	.+2808   	; 0x11fa <__mulsf3>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	c7 01       	movw	r24, r14
     708:	b6 01       	movw	r22, r12
     70a:	bf d3       	rcall	.+1918   	; 0xe8a <__subsf3>
     70c:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <g_Verr_sum>
     710:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <g_Verr_sum+0x1>
     714:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <g_Verr_sum+0x2>
     718:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <g_Verr_sum+0x3>
     71c:	88 eb       	ldi	r24, 0xB8	; 184
		  g_vel_control = 2.08;
     71e:	9e e1       	ldi	r25, 0x1E	; 30
     720:	a5 e0       	ldi	r26, 0x05	; 5
     722:	b0 e4       	ldi	r27, 0x40	; 64
     724:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_vel_control>
     728:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_vel_control+0x1>
     72c:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <g_vel_control+0x2>
     730:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <g_vel_control+0x3>
     734:	42 c0       	rjmp	.+132    	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     736:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_vel_control>
       }
       else if(g_vel_control < -2.08){
     73a:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_vel_control+0x1>
     73e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_vel_control+0x2>
     742:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_vel_control+0x3>
     746:	28 eb       	ldi	r18, 0xB8	; 184
     748:	3e e1       	ldi	r19, 0x1E	; 30
     74a:	45 e0       	ldi	r20, 0x05	; 5
     74c:	50 ec       	ldi	r21, 0xC0	; 192
     74e:	02 d4       	rcall	.+2052   	; 0xf54 <__cmpsf2>
     750:	88 23       	and	r24, r24
		  g_Verr_sum -= (g_vel_control + 2.08) * 1. *Ka_s; //  anti windup gain은 1/2Kps
     752:	9c f5       	brge	.+102    	; 0x7ba <__LOCK_REGION_LENGTH__+0x3ba>
     754:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_vel_control>
     758:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_vel_control+0x1>
     75c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_vel_control+0x2>
     760:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_vel_control+0x3>
     764:	c0 90 44 02 	lds	r12, 0x0244	; 0x800244 <g_Verr_sum>
     768:	d0 90 45 02 	lds	r13, 0x0245	; 0x800245 <g_Verr_sum+0x1>
     76c:	e0 90 46 02 	lds	r14, 0x0246	; 0x800246 <g_Verr_sum+0x2>
     770:	f0 90 47 02 	lds	r15, 0x0247	; 0x800247 <g_Verr_sum+0x3>
     774:	28 eb       	ldi	r18, 0xB8	; 184
     776:	3e e1       	ldi	r19, 0x1E	; 30
     778:	45 e0       	ldi	r20, 0x05	; 5
     77a:	50 e4       	ldi	r21, 0x40	; 64
     77c:	87 d3       	rcall	.+1806   	; 0xe8c <__addsf3>
     77e:	29 81       	ldd	r18, Y+1	; 0x01
     780:	3a 81       	ldd	r19, Y+2	; 0x02
     782:	4b 81       	ldd	r20, Y+3	; 0x03
     784:	5c 81       	ldd	r21, Y+4	; 0x04
     786:	39 d5       	rcall	.+2674   	; 0x11fa <__mulsf3>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	7c d3       	rcall	.+1784   	; 0xe8a <__subsf3>
     792:	60 93 44 02 	sts	0x0244, r22	; 0x800244 <g_Verr_sum>
     796:	70 93 45 02 	sts	0x0245, r23	; 0x800245 <g_Verr_sum+0x1>
     79a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <g_Verr_sum+0x2>
     79e:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <g_Verr_sum+0x3>
     7a2:	88 eb       	ldi	r24, 0xB8	; 184
		  g_vel_control = -2.08;
     7a4:	9e e1       	ldi	r25, 0x1E	; 30
     7a6:	a5 e0       	ldi	r26, 0x05	; 5
     7a8:	b0 ec       	ldi	r27, 0xC0	; 192
     7aa:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_vel_control>
     7ae:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_vel_control+0x1>
     7b2:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <g_vel_control+0x2>
     7b6:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <g_vel_control+0x3>
     7ba:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <g_TimerCnt>
       }
    }
   g_TimerCnt++;
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <g_TimerCnt>
     7c4:	60 91 66 02 	lds	r22, 0x0266	; 0x800266 <g_vel_control>
   //current control
   if(g_vel_control > g_Climit){
     7c8:	70 91 67 02 	lds	r23, 0x0267	; 0x800267 <g_vel_control+0x1>
     7cc:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <g_vel_control+0x2>
     7d0:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <g_vel_control+0x3>
     7d4:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <g_Climit>
     7d8:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <g_Climit+0x1>
     7dc:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <g_Climit+0x2>
     7e0:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <g_Climit+0x3>
     7e4:	06 d5       	rcall	.+2572   	; 0x11f2 <__gesf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	8c f4       	brge	.+34     	; 0x80c <__LOCK_REGION_LENGTH__+0x40c>
     7ea:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
	   g_vel_control = g_Climit;
     7ee:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     7f2:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     7f6:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     7fa:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_vel_control>
     7fe:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_vel_control+0x1>
     802:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <g_vel_control+0x2>
     806:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <g_vel_control+0x3>
     80a:	27 c0       	rjmp	.+78     	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     80c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
   }
   else if(g_vel_control < -g_Climit){
     810:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     814:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     818:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     81c:	20 91 66 02 	lds	r18, 0x0266	; 0x800266 <g_vel_control>
     820:	30 91 67 02 	lds	r19, 0x0267	; 0x800267 <g_vel_control+0x1>
     824:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <g_vel_control+0x2>
     828:	50 91 69 02 	lds	r21, 0x0269	; 0x800269 <g_vel_control+0x3>
     82c:	bc 01       	movw	r22, r24
     82e:	cd 01       	movw	r24, r26
     830:	90 58       	subi	r25, 0x80	; 128
     832:	df d4       	rcall	.+2494   	; 0x11f2 <__gesf2>
     834:	18 16       	cp	r1, r24
     836:	8c f4       	brge	.+34     	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     838:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <g_Climit>
	   g_vel_control = -g_Climit;
     83c:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <g_Climit+0x1>
     840:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <g_Climit+0x2>
     844:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <g_Climit+0x3>
     848:	b0 58       	subi	r27, 0x80	; 128
     84a:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <g_vel_control>
     84e:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <g_vel_control+0x1>
     852:	a0 93 68 02 	sts	0x0268, r26	; 0x800268 <g_vel_control+0x2>
     856:	b0 93 69 02 	sts	0x0269, r27	; 0x800269 <g_vel_control+0x3>
   }
   g_Cdes = g_vel_control; // 전류지령은 속도제어기의 출력값,    
     85a:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <g_vel_control>
     85e:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <g_vel_control+0x1>
     862:	a0 91 68 02 	lds	r26, 0x0268	; 0x800268 <g_vel_control+0x2>
     866:	b0 91 69 02 	lds	r27, 0x0269	; 0x800269 <g_vel_control+0x3>
     86a:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <g_Cdes>
     86e:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <g_Cdes+0x1>
     872:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <g_Cdes+0x2>
     876:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <g_Cdes+0x3>
   
   g_Ccur = -( ((g_ADC / 1024. * 5.) - 2.5) * 10.);
     87a:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <g_ADC>
     87e:	70 91 6c 02 	lds	r23, 0x026C	; 0x80026c <g_ADC+0x1>
     882:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <g_ADC+0x2>
     886:	90 91 6e 02 	lds	r25, 0x026E	; 0x80026e <g_ADC+0x3>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e8       	ldi	r20, 0x80	; 128
     890:	5a e3       	ldi	r21, 0x3A	; 58
     892:	b3 d4       	rcall	.+2406   	; 0x11fa <__mulsf3>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	40 ea       	ldi	r20, 0xA0	; 160
     89a:	50 e4       	ldi	r21, 0x40	; 64
     89c:	ae d4       	rcall	.+2396   	; 0x11fa <__mulsf3>
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	40 e2       	ldi	r20, 0x20	; 32
     8a4:	50 e4       	ldi	r21, 0x40	; 64
     8a6:	f1 d2       	rcall	.+1506   	; 0xe8a <__subsf3>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e2       	ldi	r20, 0x20	; 32
     8ae:	51 e4       	ldi	r21, 0x41	; 65
     8b0:	a4 d4       	rcall	.+2376   	; 0x11fa <__mulsf3>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	b0 58       	subi	r27, 0x80	; 128
     8b8:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <g_Ccur>
     8bc:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <g_Ccur+0x1>
     8c0:	a0 93 3c 02 	sts	0x023C, r26	; 0x80023c <g_Ccur+0x2>
     8c4:	b0 93 3d 02 	sts	0x023D, r27	; 0x80023d <g_Ccur+0x3>
     8c8:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <g_Cdes>
   g_Cerr = g_Cdes - g_Ccur;
     8cc:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <g_Cdes+0x1>
     8d0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <g_Cdes+0x2>
     8d4:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <g_Cdes+0x3>
     8d8:	20 91 3a 02 	lds	r18, 0x023A	; 0x80023a <g_Ccur>
     8dc:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <g_Ccur+0x1>
     8e0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <g_Ccur+0x2>
     8e4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <g_Ccur+0x3>
     8e8:	d0 d2       	rcall	.+1440   	; 0xe8a <__subsf3>
     8ea:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <g_Cerr>
     8ee:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <g_Cerr+0x1>
     8f2:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <g_Cerr+0x2>
     8f6:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <g_Cerr+0x3>
     8fa:	80 90 30 02 	lds	r8, 0x0230	; 0x800230 <g_Cerr>

   cur_control = g_Cerr * Kp_c + g_Cerr_sum * Ki_c* 0.0005;
     8fe:	90 90 31 02 	lds	r9, 0x0231	; 0x800231 <g_Cerr+0x1>
     902:	a0 90 32 02 	lds	r10, 0x0232	; 0x800232 <g_Cerr+0x2>
     906:	b0 90 33 02 	lds	r11, 0x0233	; 0x800233 <g_Cerr+0x3>
     90a:	40 90 04 01 	lds	r4, 0x0104	; 0x800104 <Kp_c>
     90e:	50 90 05 01 	lds	r5, 0x0105	; 0x800105 <Kp_c+0x1>
     912:	60 90 06 01 	lds	r6, 0x0106	; 0x800106 <Kp_c+0x2>
     916:	70 90 07 01 	lds	r7, 0x0107	; 0x800107 <Kp_c+0x3>
     91a:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <g_Cerr_sum>
     91e:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     922:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     926:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     92a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     92e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     932:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     936:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     93a:	5f d4       	rcall	.+2238   	; 0x11fa <__mulsf3>
     93c:	2f e6       	ldi	r18, 0x6F	; 111
     93e:	32 e1       	ldi	r19, 0x12	; 18
     940:	43 e0       	ldi	r20, 0x03	; 3
     942:	5a e3       	ldi	r21, 0x3A	; 58
     944:	5a d4       	rcall	.+2228   	; 0x11fa <__mulsf3>
     946:	6b 01       	movw	r12, r22
     948:	7c 01       	movw	r14, r24
     94a:	a3 01       	movw	r20, r6
     94c:	92 01       	movw	r18, r4
     94e:	c5 01       	movw	r24, r10
     950:	b4 01       	movw	r22, r8
     952:	53 d4       	rcall	.+2214   	; 0x11fa <__mulsf3>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
     958:	c7 01       	movw	r24, r14
     95a:	b6 01       	movw	r22, r12
     95c:	97 d2       	rcall	.+1326   	; 0xe8c <__addsf3>
     95e:	66 d3       	rcall	.+1740   	; 0x102c <__fixsfsi>
     960:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <cur_control+0x1>
     964:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <cur_control>
   cur_control += g_Vcur * 0.0683;
     968:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <g_Vcur>
     96c:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <g_Vcur+0x1>
     970:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_Vcur+0x2>
     974:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_Vcur+0x3>
     978:	e0 90 3e 02 	lds	r14, 0x023E	; 0x80023e <cur_control>
     97c:	f0 90 3f 02 	lds	r15, 0x023F	; 0x80023f <cur_control+0x1>
     980:	2f ed       	ldi	r18, 0xDF	; 223
     982:	30 ee       	ldi	r19, 0xE0	; 224
     984:	4b e8       	ldi	r20, 0x8B	; 139
     986:	5d e3       	ldi	r21, 0x3D	; 61
     988:	38 d4       	rcall	.+2160   	; 0x11fa <__mulsf3>
     98a:	4b 01       	movw	r8, r22
     98c:	5c 01       	movw	r10, r24
     98e:	b7 01       	movw	r22, r14
     990:	ff 0c       	add	r15, r15
     992:	88 0b       	sbc	r24, r24
     994:	99 0b       	sbc	r25, r25
     996:	7d d3       	rcall	.+1786   	; 0x1092 <__floatsisf>
     998:	9b 01       	movw	r18, r22
     99a:	ac 01       	movw	r20, r24
     99c:	c5 01       	movw	r24, r10
     99e:	b4 01       	movw	r22, r8
     9a0:	75 d2       	rcall	.+1258   	; 0xe8c <__addsf3>
     9a2:	44 d3       	rcall	.+1672   	; 0x102c <__fixsfsi>
     9a4:	70 93 3f 02 	sts	0x023F, r23	; 0x80023f <cur_control+0x1>
     9a8:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <cur_control>
     9ac:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <g_Cerr>
   
   g_Cerr_sum += g_Cerr;
     9b0:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <g_Cerr+0x1>
     9b4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <g_Cerr+0x2>
     9b8:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <g_Cerr+0x3>
     9bc:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <g_Cerr_sum>
     9c0:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     9c4:	40 91 8a 02 	lds	r20, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     9c8:	50 91 8b 02 	lds	r21, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     9cc:	5f d2       	rcall	.+1214   	; 0xe8c <__addsf3>
     9ce:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     9d2:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     9d6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
     9da:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
     9de:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_control>
   
   //I-term anti
   if(cur_control > 24){
     9e2:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_control+0x1>
     9e6:	49 97       	sbiw	r24, 0x19	; 25
     9e8:	64 f1       	brlt	.+88     	; 0xa42 <__LOCK_REGION_LENGTH__+0x642>
     9ea:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <cur_control>
	   g_Cerr_sum -= (cur_control - 24) * 1.*Ka_c;
     9ee:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <cur_control+0x1>
     9f2:	c0 90 88 02 	lds	r12, 0x0288	; 0x800288 <g_Cerr_sum>
     9f6:	d0 90 89 02 	lds	r13, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     9fa:	e0 90 8a 02 	lds	r14, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     9fe:	f0 90 8b 02 	lds	r15, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     a02:	68 51       	subi	r22, 0x18	; 24
     a04:	71 09       	sbc	r23, r1
     a06:	07 2e       	mov	r0, r23
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	41 d3       	rcall	.+1666   	; 0x1092 <__floatsisf>
     a10:	2d 81       	ldd	r18, Y+5	; 0x05
     a12:	3e 81       	ldd	r19, Y+6	; 0x06
     a14:	4f 81       	ldd	r20, Y+7	; 0x07
     a16:	58 85       	ldd	r21, Y+8	; 0x08
     a18:	f0 d3       	rcall	.+2016   	; 0x11fa <__mulsf3>
     a1a:	9b 01       	movw	r18, r22
     a1c:	ac 01       	movw	r20, r24
     a1e:	c7 01       	movw	r24, r14
     a20:	b6 01       	movw	r22, r12
     a22:	33 d2       	rcall	.+1126   	; 0xe8a <__subsf3>
     a24:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     a28:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     a2c:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
     a30:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
     a34:	88 e1       	ldi	r24, 0x18	; 24
	   cur_control = 24;
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <cur_control+0x1>
     a3c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <cur_control>
     a40:	30 c0       	rjmp	.+96     	; 0xaa2 <__LOCK_REGION_LENGTH__+0x6a2>
   }
   else if(cur_control < -24){
     a42:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <cur_control>
     a46:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <cur_control+0x1>
     a4a:	88 3e       	cpi	r24, 0xE8	; 232
     a4c:	9f 4f       	sbci	r25, 0xFF	; 255
     a4e:	4c f5       	brge	.+82     	; 0xaa2 <__LOCK_REGION_LENGTH__+0x6a2>
	  g_Cerr_sum += (cur_control + 24) * 1.*Ka_c;
     a50:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <cur_control>
     a54:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <cur_control+0x1>
     a58:	c0 90 88 02 	lds	r12, 0x0288	; 0x800288 <g_Cerr_sum>
     a5c:	d0 90 89 02 	lds	r13, 0x0289	; 0x800289 <g_Cerr_sum+0x1>
     a60:	e0 90 8a 02 	lds	r14, 0x028A	; 0x80028a <g_Cerr_sum+0x2>
     a64:	f0 90 8b 02 	lds	r15, 0x028B	; 0x80028b <g_Cerr_sum+0x3>
     a68:	68 5e       	subi	r22, 0xE8	; 232
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	0e d3       	rcall	.+1564   	; 0x1092 <__floatsisf>
     a76:	2d 81       	ldd	r18, Y+5	; 0x05
     a78:	3e 81       	ldd	r19, Y+6	; 0x06
     a7a:	4f 81       	ldd	r20, Y+7	; 0x07
     a7c:	58 85       	ldd	r21, Y+8	; 0x08
     a7e:	bd d3       	rcall	.+1914   	; 0x11fa <__mulsf3>
     a80:	a7 01       	movw	r20, r14
     a82:	96 01       	movw	r18, r12
     a84:	03 d2       	rcall	.+1030   	; 0xe8c <__addsf3>
     a86:	60 93 88 02 	sts	0x0288, r22	; 0x800288 <g_Cerr_sum>
     a8a:	70 93 89 02 	sts	0x0289, r23	; 0x800289 <g_Cerr_sum+0x1>
     a8e:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <g_Cerr_sum+0x2>
     a92:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <g_Cerr_sum+0x3>
     a96:	88 ee       	ldi	r24, 0xE8	; 232
     a98:	9f ef       	ldi	r25, 0xFF	; 255
     a9a:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <cur_control+0x1>
	   cur_control = -24;
     a9e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <cur_control>
     aa2:	60 91 3e 02 	lds	r22, 0x023E	; 0x80023e <cur_control>
     aa6:	70 91 3f 02 	lds	r23, 0x023F	; 0x80023f <cur_control+0x1>
   }
   
   // 최종적으로 전류 제어 값으로 전압 값을 계산하기 위해 값을 넘겨 줌
   SetDutyCW(cur_control);            // target Voltage
     aaa:	07 2e       	mov	r0, r23
     aac:	00 0c       	add	r0, r0
     aae:	88 0b       	sbc	r24, r24
     ab0:	99 0b       	sbc	r25, r25
     ab2:	ef d2       	rcall	.+1502   	; 0x1092 <__floatsisf>
     ab4:	0a db       	rcall	.-2540   	; 0xca <SetDutyCW>
     ab6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     aba:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     abe:	01 96       	adiw	r24, 0x01	; 1
   
   
   g_SendFlag++;
     ac0:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <__data_end+0x1>
     ac4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
     ac8:	28 96       	adiw	r28, 0x08	; 8
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63

}
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	ff 91       	pop	r31
     ada:	ef 91       	pop	r30
     adc:	bf 91       	pop	r27
     ade:	af 91       	pop	r26
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	7f 91       	pop	r23
     ae6:	6f 91       	pop	r22
     ae8:	5f 91       	pop	r21
     aea:	4f 91       	pop	r20
     aec:	3f 91       	pop	r19
     aee:	2f 91       	pop	r18
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	bf 90       	pop	r11
     afa:	af 90       	pop	r10
     afc:	9f 90       	pop	r9
     afe:	8f 90       	pop	r8
     b00:	7f 90       	pop	r7
     b02:	6f 90       	pop	r6
     b04:	5f 90       	pop	r5
     b06:	4f 90       	pop	r4
     b08:	0f 90       	pop	r0
     b0a:	0b be       	out	0x3b, r0	; 59
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0f 90       	pop	r0
     b12:	1f 90       	pop	r1
     b14:	18 95       	reti

00000b16 <main>:
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	64 97       	sbiw	r28, 0x14	; 20



int main(void){
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
   
   Packet_t packet;
   packet.data.header[0] = packet.data.header[1] = packet.data.header[2] = packet.data.header[3] = 0xFE;
     b2a:	8e ef       	ldi	r24, 0xFE	; 254
     b2c:	8c 83       	std	Y+4, r24	; 0x04
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	8a 83       	std	Y+2, r24	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
   
   InitIO();
     b34:	47 d1       	rcall	.+654    	; 0xdc4 <InitIO>
   
   //Uart
   InitUart0();
     b36:	8d d1       	rcall	.+794    	; 0xe52 <InitUart0>
   
   //SPI
   InitSPI();
     b38:	95 d1       	rcall	.+810    	; 0xe64 <InitSPI>
   
   //Timer
   InitTimer0();
     b3a:	51 d1       	rcall	.+674    	; 0xdde <InitTimer0>
     b3c:	55 d1       	rcall	.+682    	; 0xde8 <InitTimer1>
   InitTimer1();
     b3e:	67 d1       	rcall	.+718    	; 0xe0e <InitTimer3>
     b40:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
   InitTimer3();
     b44:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>


   TCNT1 = TCNT3 = 0;
     b48:	1d bc       	out	0x2d, r1	; 45
     b4a:	1c bc       	out	0x2c, r1	; 44
     b4c:	60 e0       	ldi	r22, 0x00	; 0
   SetDutyCW(0.);
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	cb 01       	movw	r24, r22
     b52:	bb da       	rcall	.-2698   	; 0xca <SetDutyCW>
     b54:	79 d1       	rcall	.+754    	; 0xe48 <InitADC>
     b56:	e6 da       	rcall	.-2612   	; 0x124 <InitLS7366>
   
   //ADC
   InitADC();
     b58:	83 e8       	ldi	r24, 0x83	; 131
     b5a:	82 bf       	out	0x32, r24	; 50
   
   //LS7366
   InitLS7366();
     b5c:	78 94       	sei
     b5e:	b1 2c       	mov	r11, r1
   
   TCNT0 = 256 - 125;
     b60:	0f 2e       	mov	r0, r31
     b62:	f4 e1       	ldi	r31, 0x14	; 20
   sei();
     b64:	9f 2e       	mov	r9, r31

   unsigned char check = 0;
     b66:	f0 2d       	mov	r31, r0
      if(g_SendFlag > 19){
         g_SendFlag = 0;         

            
         packet.data.id = g_ID;
         packet.data.size = sizeof(Packet_data_t);
     b68:	0f 2e       	mov	r0, r31
     b6a:	f3 e0       	ldi	r31, 0x03	; 3
     b6c:	af 2e       	mov	r10, r31
     b6e:	f0 2d       	mov	r31, r0
         packet.data.mode = 3;
     b70:	7e 01       	movw	r14, r28
     b72:	85 e1       	ldi	r24, 0x15	; 21
     b74:	e8 0e       	add	r14, r24
     b76:	f1 1c       	adc	r15, r1
     b78:	0f 2e       	mov	r0, r31
     b7a:	fe e4       	ldi	r31, 0x4E	; 78
     b7c:	cf 2e       	mov	r12, r31
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
         case 1:

            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
            
            if (checkSize == 8) {
               if(g_PacketBuffer.data.id == g_ID){
     b80:	df 2e       	mov	r13, r31
     b82:	f0 2d       	mov	r31, r0
     b84:	68 94       	set
     b86:	77 24       	eor	r7, r7
     b88:	71 f8       	bld	r7, 1
     b8a:	88 24       	eor	r8, r8

                  g_PacketMode = 2;
     b8c:	83 94       	inc	r8
     b8e:	ba c0       	rjmp	.+372    	; 0xd04 <main+0x1ee>
     b90:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <g_PacketMode>
         case 0:
            
            if (g_buf[g_BufReadCnt] == 0xFF) {
               checkSize++;
               if (checkSize == 4) {
                  g_PacketMode = 1;
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	e1 f0       	breq	.+56     	; 0xbd0 <main+0xba>
   unsigned char check = 0;
   
    while (1) {
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
         
         switch(g_PacketMode){
     b98:	18 f0       	brcs	.+6      	; 0xba0 <main+0x8a>
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	e1 f1       	breq	.+120    	; 0xc16 <main+0x100>
     b9e:	ad c0       	rjmp	.+346    	; 0xcfa <main+0x1e4>
     ba0:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <g_BufReadCnt>
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	e4 5d       	subi	r30, 0xD4	; 212
         case 0:
            
            if (g_buf[g_BufReadCnt] == 0xFF) {
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 81       	ld	r24, Z
     bac:	8f 3f       	cpi	r24, 0xFF	; 255
     bae:	69 f4       	brne	.+26     	; 0xbca <main+0xb4>
     bb0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
     bb4:	8f 5f       	subi	r24, 0xFF	; 255
     bb6:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <checkSize>
               checkSize++;
     bba:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
     bbe:	84 30       	cpi	r24, 0x04	; 4
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <main+0xae>
               if (checkSize == 4) {
     bc2:	9b c0       	rjmp	.+310    	; 0xcfa <main+0x1e4>
     bc4:	80 92 90 02 	sts	0x0290, r8	; 0x800290 <g_PacketMode>
     bc8:	98 c0       	rjmp	.+304    	; 0xcfa <main+0x1e4>
     bca:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <checkSize>
                  g_PacketMode = 1;
     bce:	95 c0       	rjmp	.+298    	; 0xcfa <main+0x1e4>
     bd0:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <checkSize>
               }
            }
            else {
               checkSize = 0;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	8e 0f       	add	r24, r30
            }
            break;
            
         case 1:

            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     bd8:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <checkSize>
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <g_BufReadCnt>
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	a4 5d       	subi	r26, 0xD4	; 212
     be6:	be 4f       	sbci	r27, 0xFE	; 254
     be8:	8c 91       	ld	r24, X
     bea:	e2 5b       	subi	r30, 0xB2	; 178
     bec:	fd 4f       	sbci	r31, 0xFD	; 253
     bee:	80 83       	st	Z, r24
     bf0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
     bf4:	88 30       	cpi	r24, 0x08	; 8
     bf6:	09 f0       	breq	.+2      	; 0xbfa <main+0xe4>
            
            if (checkSize == 8) {
     bf8:	80 c0       	rjmp	.+256    	; 0xcfa <main+0x1e4>
     bfa:	f6 01       	movw	r30, r12
     bfc:	95 81       	ldd	r25, Z+5	; 0x05
     bfe:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
               if(g_PacketBuffer.data.id == g_ID){
     c02:	98 13       	cpse	r25, r24
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <main+0xf6>
     c06:	70 92 90 02 	sts	0x0290, r7	; 0x800290 <g_PacketMode>
     c0a:	77 c0       	rjmp	.+238    	; 0xcfa <main+0x1e4>
     c0c:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>

                  g_PacketMode = 2;
     c10:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <checkSize>
               }
               else{
                  g_PacketMode = 0;
     c14:	72 c0       	rjmp	.+228    	; 0xcfa <main+0x1e4>
     c16:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <checkSize>
                  checkSize = 0;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	8e 0f       	add	r24, r30

            break;
         
         case 2:
            
            g_PacketBuffer.buffer[checkSize++] = g_buf[g_BufReadCnt];
     c1e:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <checkSize>
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <g_BufReadCnt>
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	a4 5d       	subi	r26, 0xD4	; 212
     c2c:	be 4f       	sbci	r27, 0xFE	; 254
     c2e:	8c 91       	ld	r24, X
     c30:	e2 5b       	subi	r30, 0xB2	; 178
     c32:	fd 4f       	sbci	r31, 0xFD	; 253
     c34:	80 83       	st	Z, r24
     c36:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <g_BufReadCnt>
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	e4 5d       	subi	r30, 0xD4	; 212
            check += g_buf[g_BufReadCnt];
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	80 81       	ld	r24, Z
     c42:	b8 0e       	add	r11, r24
     c44:	f6 01       	movw	r30, r12
     c46:	94 81       	ldd	r25, Z+4	; 0x04
     c48:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
            
            if (checkSize == g_PacketBuffer.data.size) {
     c4c:	98 13       	cpse	r25, r24
     c4e:	44 c0       	rjmp	.+136    	; 0xcd8 <main+0x1c2>
     c50:	87 81       	ldd	r24, Z+7	; 0x07
     c52:	b8 12       	cpse	r11, r24
     c54:	3b c0       	rjmp	.+118    	; 0xccc <main+0x1b6>
     c56:	86 81       	ldd	r24, Z+6	; 0x06

               if(check == g_PacketBuffer.data.check){
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	c1 f5       	brne	.+112    	; 0xccc <main+0x1b6>

                  switch(g_PacketBuffer.data.mode){
     c5c:	60 85       	ldd	r22, Z+8	; 0x08
     c5e:	71 85       	ldd	r23, Z+9	; 0x09
     c60:	82 85       	ldd	r24, Z+10	; 0x0a

                     case 2:
                     g_Pdes = g_PacketBuffer.data.pos/ 1000.;
     c62:	93 85       	ldd	r25, Z+11	; 0x0b
     c64:	16 d2       	rcall	.+1068   	; 0x1092 <__floatsisf>
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a e7       	ldi	r20, 0x7A	; 122
     c6c:	54 e4       	ldi	r21, 0x44	; 68
     c6e:	76 d1       	rcall	.+748    	; 0xf5c <__divsf3>
     c70:	60 93 8c 02 	sts	0x028C, r22	; 0x80028c <g_Pdes>
     c74:	70 93 8d 02 	sts	0x028D, r23	; 0x80028d <g_Pdes+0x1>
     c78:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <g_Pdes+0x2>
     c7c:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <g_Pdes+0x3>
     c80:	f6 01       	movw	r30, r12
     c82:	64 85       	ldd	r22, Z+12	; 0x0c
     c84:	75 85       	ldd	r23, Z+13	; 0x0d
                     g_Vlimit = g_PacketBuffer.data.velo/ 1000.;
     c86:	86 85       	ldd	r24, Z+14	; 0x0e
     c88:	97 85       	ldd	r25, Z+15	; 0x0f
     c8a:	03 d2       	rcall	.+1030   	; 0x1092 <__floatsisf>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	4a e7       	ldi	r20, 0x7A	; 122
     c92:	54 e4       	ldi	r21, 0x44	; 68
     c94:	63 d1       	rcall	.+710    	; 0xf5c <__divsf3>
     c96:	60 93 1d 01 	sts	0x011D, r22	; 0x80011d <g_Vlimit>
     c9a:	70 93 1e 01 	sts	0x011E, r23	; 0x80011e <g_Vlimit+0x1>
     c9e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <g_Vlimit+0x2>
     ca2:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <g_Vlimit+0x3>
     ca6:	f6 01       	movw	r30, r12
     ca8:	60 89       	ldd	r22, Z+16	; 0x10
     caa:	71 89       	ldd	r23, Z+17	; 0x11
                     g_Climit = g_PacketBuffer.data.cur/ 1000.;
     cac:	82 89       	ldd	r24, Z+18	; 0x12
     cae:	93 89       	ldd	r25, Z+19	; 0x13
     cb0:	f0 d1       	rcall	.+992    	; 0x1092 <__floatsisf>
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	4a e7       	ldi	r20, 0x7A	; 122
     cb8:	54 e4       	ldi	r21, 0x44	; 68
     cba:	50 d1       	rcall	.+672    	; 0xf5c <__divsf3>
     cbc:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <g_Climit>
     cc0:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <g_Climit+0x1>
     cc4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <g_Climit+0x2>
     cc8:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <g_Climit+0x3>
     ccc:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>
     cd0:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <checkSize>
     cd4:	b1 2c       	mov	r11, r1
                     break;
                     }
               }
               
               check = 0;
               g_PacketMode = 0;
     cd6:	11 c0       	rjmp	.+34     	; 0xcfa <main+0x1e4>
     cd8:	f6 01       	movw	r30, r12
               checkSize = 0;
     cda:	94 81       	ldd	r25, Z+4	; 0x04
                     g_Climit = g_PacketBuffer.data.cur/ 1000.;
                     break;
                     }
               }
               
               check = 0;
     cdc:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
               g_PacketMode = 0;
               checkSize = 0;
            }
            else if(checkSize > g_PacketBuffer.data.size || checkSize > sizeof(Packet_t)) {
     ce0:	98 17       	cp	r25, r24
     ce2:	20 f0       	brcs	.+8      	; 0xcec <main+0x1d6>
     ce4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <checkSize>
     ce8:	85 31       	cpi	r24, 0x15	; 21
     cea:	38 f0       	brcs	.+14     	; 0xcfa <main+0x1e4>
     cec:	86 e6       	ldi	r24, 0x66	; 102
     cee:	bf d0       	rcall	.+382    	; 0xe6e <TransUart0>
     cf0:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <g_PacketMode>
               TransUart0('f');
     cf4:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <checkSize>
     cf8:	b1 2c       	mov	r11, r1
               check = 0;
               g_PacketMode = 0;
     cfa:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <g_BufReadCnt>
               checkSize = 0;
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <g_BufReadCnt>
   sei();

   unsigned char check = 0;
   
    while (1) {
      for(;g_BufReadCnt != g_BufWriteCnt; g_BufReadCnt++){
     d04:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <g_BufReadCnt>
     d08:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <g_BufWriteCnt>
     d0c:	98 13       	cpse	r25, r24
     d0e:	40 cf       	rjmp	.-384    	; 0xb90 <main+0x7a>
     d10:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
     d14:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
     d18:	44 97       	sbiw	r24, 0x14	; 20
               checkSize = 0;
            }
         }
      }

      if(g_SendFlag > 19){
     d1a:	a4 f3       	brlt	.-24     	; 0xd04 <main+0x1ee>
     d1c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__data_end+0x1>
     d20:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
     d24:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <g_ID>
         g_SendFlag = 0;         
     d28:	8e 83       	std	Y+6, r24	; 0x06
     d2a:	9d 82       	std	Y+5, r9	; 0x05
     d2c:	af 82       	std	Y+7, r10	; 0x07

            
         packet.data.id = g_ID;
     d2e:	18 86       	std	Y+8, r1	; 0x08
     d30:	60 91 7c 02 	lds	r22, 0x027C	; 0x80027c <g_Pcur>
         packet.data.size = sizeof(Packet_data_t);
         packet.data.mode = 3;
         packet.data.check = 0;
     d34:	70 91 7d 02 	lds	r23, 0x027D	; 0x80027d <g_Pcur+0x1>
         
         //packet.data.pos = g_Pdes * 1000; 
         //packet.data.velo = g_Vlimit * 1000;
         //packet.data.cur = g_Climit * 1000;  
         
         packet.data.pos = g_Pcur *1000;
     d38:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <g_Pcur+0x2>
     d3c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <g_Pcur+0x3>
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a e7       	ldi	r20, 0x7A	; 122
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	58 d2       	rcall	.+1200   	; 0x11fa <__mulsf3>
     d4a:	70 d1       	rcall	.+736    	; 0x102c <__fixsfsi>
     d4c:	69 87       	std	Y+9, r22	; 0x09
     d4e:	7a 87       	std	Y+10, r23	; 0x0a
     d50:	8b 87       	std	Y+11, r24	; 0x0b
     d52:	9c 87       	std	Y+12, r25	; 0x0c
     d54:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <g_Vcur>
     d58:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <g_Vcur+0x1>
         packet.data.velo = g_Vcur * 1000;
     d5c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <g_Vcur+0x2>
     d60:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <g_Vcur+0x3>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a e7       	ldi	r20, 0x7A	; 122
     d6a:	54 e4       	ldi	r21, 0x44	; 68
     d6c:	46 d2       	rcall	.+1164   	; 0x11fa <__mulsf3>
     d6e:	5e d1       	rcall	.+700    	; 0x102c <__fixsfsi>
     d70:	6d 87       	std	Y+13, r22	; 0x0d
     d72:	7e 87       	std	Y+14, r23	; 0x0e
     d74:	8f 87       	std	Y+15, r24	; 0x0f
     d76:	98 8b       	std	Y+16, r25	; 0x10
     d78:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <g_Ccur>
     d7c:	70 91 3b 02 	lds	r23, 0x023B	; 0x80023b <g_Ccur+0x1>
         packet.data.cur = g_Ccur * 1000;
     d80:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <g_Ccur+0x2>
     d84:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <g_Ccur+0x3>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	4a e7       	ldi	r20, 0x7A	; 122
     d8e:	54 e4       	ldi	r21, 0x44	; 68
     d90:	34 d2       	rcall	.+1128   	; 0x11fa <__mulsf3>
     d92:	4c d1       	rcall	.+664    	; 0x102c <__fixsfsi>
     d94:	69 8b       	std	Y+17, r22	; 0x11
     d96:	7a 8b       	std	Y+18, r23	; 0x12
     d98:	8b 8b       	std	Y+19, r24	; 0x13
     d9a:	9c 8b       	std	Y+20, r25	; 0x14
     d9c:	fe 01       	movw	r30, r28
     d9e:	39 96       	adiw	r30, 0x09	; 9
     da0:	81 91       	ld	r24, Z+
     da2:	98 85       	ldd	r25, Y+8	; 0x08
     da4:	89 0f       	add	r24, r25
     da6:	88 87       	std	Y+8, r24	; 0x08
         
         for (int i = 8; i < sizeof(Packet_t); i++)
         packet.data.check += packet.buffer[i];
     da8:	ee 15       	cp	r30, r14
     daa:	ff 05       	cpc	r31, r15
     dac:	c9 f7       	brne	.-14     	; 0xda0 <main+0x28a>
     dae:	8e 01       	movw	r16, r28
         
         packet.data.pos = g_Pcur *1000;
         packet.data.velo = g_Vcur * 1000;
         packet.data.cur = g_Ccur * 1000;
         
         for (int i = 8; i < sizeof(Packet_t); i++)
     db0:	0f 5f       	subi	r16, 0xFF	; 255
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	f8 01       	movw	r30, r16
     db6:	81 91       	ld	r24, Z+
     db8:	8f 01       	movw	r16, r30
     dba:	59 d0       	rcall	.+178    	; 0xe6e <TransUart0>
         packet.data.check += packet.buffer[i];
         
         for(int i=0; i<packet.data.size; i++){
            TransUart0(packet.buffer[i]);
     dbc:	0e 15       	cp	r16, r14
     dbe:	1f 05       	cpc	r17, r15
     dc0:	c9 f7       	brne	.-14     	; 0xdb4 <main+0x29e>
     dc2:	a0 cf       	rjmp	.-192    	; 0xd04 <main+0x1ee>

00000dc4 <InitIO>:
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
         packet.data.cur = g_Ccur * 1000;
         
         for (int i = 8; i < sizeof(Packet_t); i++)
         packet.data.check += packet.buffer[i];
         
         for(int i=0; i<packet.data.size; i++){
     dc6:	8a bb       	out	0x1a, r24	; 26
     dc8:	84 bb       	out	0x14, r24	; 20
     dca:	88 e0       	ldi	r24, 0x08	; 8
     dcc:	81 bb       	out	0x11, r24	; 17
     dce:	87 e6       	ldi	r24, 0x67	; 103
     dd0:	87 bb       	out	0x17, r24	; 23
     dd2:	8a e1       	ldi	r24, 0x1A	; 26
     dd4:	82 b9       	out	0x02, r24	; 2
     dd6:	1b ba       	out	0x1b, r1	; 27
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	88 bb       	out	0x18, r24	; 24
     ddc:	08 95       	ret

00000dde <InitTimer0>:
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	83 bf       	out	0x33, r24	; 51
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	87 bf       	out	0x37, r24	; 55
     de6:	08 95       	ret

00000de8 <InitTimer1>:
     de8:	82 ee       	ldi	r24, 0xE2	; 226
     dea:	8f bd       	out	0x2f, r24	; 47
     dec:	81 e1       	ldi	r24, 0x11	; 17
     dee:	8e bd       	out	0x2e, r24	; 46
     df0:	8f e8       	ldi	r24, 0x8F	; 143
     df2:	91 e0       	ldi	r25, 0x01	; 1
     df4:	97 bd       	out	0x27, r25	; 39
     df6:	86 bd       	out	0x26, r24	; 38
     df8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     dfc:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     e00:	1b bc       	out	0x2b, r1	; 43
     e02:	1a bc       	out	0x2a, r1	; 42
     e04:	19 bc       	out	0x29, r1	; 41
     e06:	18 bc       	out	0x28, r1	; 40
     e08:	1d bc       	out	0x2d, r1	; 45
     e0a:	1c bc       	out	0x2c, r1	; 44
     e0c:	08 95       	ret

00000e0e <InitTimer3>:
     e0e:	82 eb       	ldi	r24, 0xB2	; 178
     e10:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     e1a:	8f e8       	ldi	r24, 0x8F	; 143
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e22:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e26:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     e2a:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     e2e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e32:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e36:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     e3a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     e3e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e42:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e46:	08 95       	ret

00000e48 <InitADC>:
     e48:	80 e4       	ldi	r24, 0x40	; 64
     e4a:	87 b9       	out	0x07, r24	; 7
     e4c:	86 e8       	ldi	r24, 0x86	; 134
     e4e:	86 b9       	out	0x06, r24	; 6
     e50:	08 95       	ret

00000e52 <InitUart0>:
     e52:	1b b8       	out	0x0b, r1	; 11
     e54:	88 e9       	ldi	r24, 0x98	; 152
     e56:	8a b9       	out	0x0a, r24	; 10
     e58:	86 e0       	ldi	r24, 0x06	; 6
     e5a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     e5e:	87 e6       	ldi	r24, 0x67	; 103
     e60:	89 b9       	out	0x09, r24	; 9
     e62:	08 95       	ret

00000e64 <InitSPI>:
     e64:	80 e5       	ldi	r24, 0x50	; 80
     e66:	8d b9       	out	0x0d, r24	; 13
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8e b9       	out	0x0e, r24	; 14
     e6c:	08 95       	ret

00000e6e <TransUart0>:
     e6e:	5d 9b       	sbis	0x0b, 5	; 11
     e70:	fe cf       	rjmp	.-4      	; 0xe6e <TransUart0>
     e72:	8c b9       	out	0x0c, r24	; 12
     e74:	08 95       	ret

00000e76 <SPI_MasterSend>:
     e76:	8f b9       	out	0x0f, r24	; 15
     e78:	77 9b       	sbis	0x0e, 7	; 14
     e7a:	fe cf       	rjmp	.-4      	; 0xe78 <SPI_MasterSend+0x2>
     e7c:	8f b1       	in	r24, 0x0f	; 15
     e7e:	08 95       	ret

00000e80 <SPI_MasterRecv>:
     e80:	1f b8       	out	0x0f, r1	; 15
     e82:	77 9b       	sbis	0x0e, 7	; 14
     e84:	fe cf       	rjmp	.-4      	; 0xe82 <SPI_MasterRecv+0x2>
     e86:	8f b1       	in	r24, 0x0f	; 15
     e88:	08 95       	ret

00000e8a <__subsf3>:
     e8a:	50 58       	subi	r21, 0x80	; 128

00000e8c <__addsf3>:
     e8c:	bb 27       	eor	r27, r27
     e8e:	aa 27       	eor	r26, r26
     e90:	0e d0       	rcall	.+28     	; 0xeae <__addsf3x>
     e92:	75 c1       	rjmp	.+746    	; 0x117e <__fp_round>
     e94:	66 d1       	rcall	.+716    	; 0x1162 <__fp_pscA>
     e96:	30 f0       	brcs	.+12     	; 0xea4 <__addsf3+0x18>
     e98:	6b d1       	rcall	.+726    	; 0x1170 <__fp_pscB>
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__addsf3+0x18>
     e9c:	31 f4       	brne	.+12     	; 0xeaa <__addsf3+0x1e>
     e9e:	9f 3f       	cpi	r25, 0xFF	; 255
     ea0:	11 f4       	brne	.+4      	; 0xea6 <__addsf3+0x1a>
     ea2:	1e f4       	brtc	.+6      	; 0xeaa <__addsf3+0x1e>
     ea4:	5b c1       	rjmp	.+694    	; 0x115c <__fp_nan>
     ea6:	0e f4       	brtc	.+2      	; 0xeaa <__addsf3+0x1e>
     ea8:	e0 95       	com	r30
     eaa:	e7 fb       	bst	r30, 7
     eac:	51 c1       	rjmp	.+674    	; 0x1150 <__fp_inf>

00000eae <__addsf3x>:
     eae:	e9 2f       	mov	r30, r25
     eb0:	77 d1       	rcall	.+750    	; 0x11a0 <__fp_split3>
     eb2:	80 f3       	brcs	.-32     	; 0xe94 <__addsf3+0x8>
     eb4:	ba 17       	cp	r27, r26
     eb6:	62 07       	cpc	r22, r18
     eb8:	73 07       	cpc	r23, r19
     eba:	84 07       	cpc	r24, r20
     ebc:	95 07       	cpc	r25, r21
     ebe:	18 f0       	brcs	.+6      	; 0xec6 <__addsf3x+0x18>
     ec0:	71 f4       	brne	.+28     	; 0xede <__addsf3x+0x30>
     ec2:	9e f5       	brtc	.+102    	; 0xf2a <__addsf3x+0x7c>
     ec4:	8f c1       	rjmp	.+798    	; 0x11e4 <__fp_zero>
     ec6:	0e f4       	brtc	.+2      	; 0xeca <__addsf3x+0x1c>
     ec8:	e0 95       	com	r30
     eca:	0b 2e       	mov	r0, r27
     ecc:	ba 2f       	mov	r27, r26
     ece:	a0 2d       	mov	r26, r0
     ed0:	0b 01       	movw	r0, r22
     ed2:	b9 01       	movw	r22, r18
     ed4:	90 01       	movw	r18, r0
     ed6:	0c 01       	movw	r0, r24
     ed8:	ca 01       	movw	r24, r20
     eda:	a0 01       	movw	r20, r0
     edc:	11 24       	eor	r1, r1
     ede:	ff 27       	eor	r31, r31
     ee0:	59 1b       	sub	r21, r25
     ee2:	99 f0       	breq	.+38     	; 0xf0a <__addsf3x+0x5c>
     ee4:	59 3f       	cpi	r21, 0xF9	; 249
     ee6:	50 f4       	brcc	.+20     	; 0xefc <__addsf3x+0x4e>
     ee8:	50 3e       	cpi	r21, 0xE0	; 224
     eea:	68 f1       	brcs	.+90     	; 0xf46 <__addsf3x+0x98>
     eec:	1a 16       	cp	r1, r26
     eee:	f0 40       	sbci	r31, 0x00	; 0
     ef0:	a2 2f       	mov	r26, r18
     ef2:	23 2f       	mov	r18, r19
     ef4:	34 2f       	mov	r19, r20
     ef6:	44 27       	eor	r20, r20
     ef8:	58 5f       	subi	r21, 0xF8	; 248
     efa:	f3 cf       	rjmp	.-26     	; 0xee2 <__addsf3x+0x34>
     efc:	46 95       	lsr	r20
     efe:	37 95       	ror	r19
     f00:	27 95       	ror	r18
     f02:	a7 95       	ror	r26
     f04:	f0 40       	sbci	r31, 0x00	; 0
     f06:	53 95       	inc	r21
     f08:	c9 f7       	brne	.-14     	; 0xefc <__addsf3x+0x4e>
     f0a:	7e f4       	brtc	.+30     	; 0xf2a <__addsf3x+0x7c>
     f0c:	1f 16       	cp	r1, r31
     f0e:	ba 0b       	sbc	r27, r26
     f10:	62 0b       	sbc	r22, r18
     f12:	73 0b       	sbc	r23, r19
     f14:	84 0b       	sbc	r24, r20
     f16:	ba f0       	brmi	.+46     	; 0xf46 <__addsf3x+0x98>
     f18:	91 50       	subi	r25, 0x01	; 1
     f1a:	a1 f0       	breq	.+40     	; 0xf44 <__addsf3x+0x96>
     f1c:	ff 0f       	add	r31, r31
     f1e:	bb 1f       	adc	r27, r27
     f20:	66 1f       	adc	r22, r22
     f22:	77 1f       	adc	r23, r23
     f24:	88 1f       	adc	r24, r24
     f26:	c2 f7       	brpl	.-16     	; 0xf18 <__addsf3x+0x6a>
     f28:	0e c0       	rjmp	.+28     	; 0xf46 <__addsf3x+0x98>
     f2a:	ba 0f       	add	r27, r26
     f2c:	62 1f       	adc	r22, r18
     f2e:	73 1f       	adc	r23, r19
     f30:	84 1f       	adc	r24, r20
     f32:	48 f4       	brcc	.+18     	; 0xf46 <__addsf3x+0x98>
     f34:	87 95       	ror	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b7 95       	ror	r27
     f3c:	f7 95       	ror	r31
     f3e:	9e 3f       	cpi	r25, 0xFE	; 254
     f40:	08 f0       	brcs	.+2      	; 0xf44 <__addsf3x+0x96>
     f42:	b3 cf       	rjmp	.-154    	; 0xeaa <__addsf3+0x1e>
     f44:	93 95       	inc	r25
     f46:	88 0f       	add	r24, r24
     f48:	08 f0       	brcs	.+2      	; 0xf4c <__addsf3x+0x9e>
     f4a:	99 27       	eor	r25, r25
     f4c:	ee 0f       	add	r30, r30
     f4e:	97 95       	ror	r25
     f50:	87 95       	ror	r24
     f52:	08 95       	ret

00000f54 <__cmpsf2>:
     f54:	d9 d0       	rcall	.+434    	; 0x1108 <__fp_cmp>
     f56:	08 f4       	brcc	.+2      	; 0xf5a <__cmpsf2+0x6>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	08 95       	ret

00000f5c <__divsf3>:
     f5c:	0c d0       	rcall	.+24     	; 0xf76 <__divsf3x>
     f5e:	0f c1       	rjmp	.+542    	; 0x117e <__fp_round>
     f60:	07 d1       	rcall	.+526    	; 0x1170 <__fp_pscB>
     f62:	40 f0       	brcs	.+16     	; 0xf74 <__divsf3+0x18>
     f64:	fe d0       	rcall	.+508    	; 0x1162 <__fp_pscA>
     f66:	30 f0       	brcs	.+12     	; 0xf74 <__divsf3+0x18>
     f68:	21 f4       	brne	.+8      	; 0xf72 <__divsf3+0x16>
     f6a:	5f 3f       	cpi	r21, 0xFF	; 255
     f6c:	19 f0       	breq	.+6      	; 0xf74 <__divsf3+0x18>
     f6e:	f0 c0       	rjmp	.+480    	; 0x1150 <__fp_inf>
     f70:	51 11       	cpse	r21, r1
     f72:	39 c1       	rjmp	.+626    	; 0x11e6 <__fp_szero>
     f74:	f3 c0       	rjmp	.+486    	; 0x115c <__fp_nan>

00000f76 <__divsf3x>:
     f76:	14 d1       	rcall	.+552    	; 0x11a0 <__fp_split3>
     f78:	98 f3       	brcs	.-26     	; 0xf60 <__divsf3+0x4>

00000f7a <__divsf3_pse>:
     f7a:	99 23       	and	r25, r25
     f7c:	c9 f3       	breq	.-14     	; 0xf70 <__divsf3+0x14>
     f7e:	55 23       	and	r21, r21
     f80:	b1 f3       	breq	.-20     	; 0xf6e <__divsf3+0x12>
     f82:	95 1b       	sub	r25, r21
     f84:	55 0b       	sbc	r21, r21
     f86:	bb 27       	eor	r27, r27
     f88:	aa 27       	eor	r26, r26
     f8a:	62 17       	cp	r22, r18
     f8c:	73 07       	cpc	r23, r19
     f8e:	84 07       	cpc	r24, r20
     f90:	38 f0       	brcs	.+14     	; 0xfa0 <__divsf3_pse+0x26>
     f92:	9f 5f       	subi	r25, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	44 1f       	adc	r20, r20
     f9c:	aa 1f       	adc	r26, r26
     f9e:	a9 f3       	breq	.-22     	; 0xf8a <__divsf3_pse+0x10>
     fa0:	33 d0       	rcall	.+102    	; 0x1008 <__divsf3_pse+0x8e>
     fa2:	0e 2e       	mov	r0, r30
     fa4:	3a f0       	brmi	.+14     	; 0xfb4 <__divsf3_pse+0x3a>
     fa6:	e0 e8       	ldi	r30, 0x80	; 128
     fa8:	30 d0       	rcall	.+96     	; 0x100a <__divsf3_pse+0x90>
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	50 40       	sbci	r21, 0x00	; 0
     fae:	e6 95       	lsr	r30
     fb0:	00 1c       	adc	r0, r0
     fb2:	ca f7       	brpl	.-14     	; 0xfa6 <__divsf3_pse+0x2c>
     fb4:	29 d0       	rcall	.+82     	; 0x1008 <__divsf3_pse+0x8e>
     fb6:	fe 2f       	mov	r31, r30
     fb8:	27 d0       	rcall	.+78     	; 0x1008 <__divsf3_pse+0x8e>
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	bb 1f       	adc	r27, r27
     fc2:	26 17       	cp	r18, r22
     fc4:	37 07       	cpc	r19, r23
     fc6:	48 07       	cpc	r20, r24
     fc8:	ab 07       	cpc	r26, r27
     fca:	b0 e8       	ldi	r27, 0x80	; 128
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__divsf3_pse+0x56>
     fce:	bb 0b       	sbc	r27, r27
     fd0:	80 2d       	mov	r24, r0
     fd2:	bf 01       	movw	r22, r30
     fd4:	ff 27       	eor	r31, r31
     fd6:	93 58       	subi	r25, 0x83	; 131
     fd8:	5f 4f       	sbci	r21, 0xFF	; 255
     fda:	2a f0       	brmi	.+10     	; 0xfe6 <__divsf3_pse+0x6c>
     fdc:	9e 3f       	cpi	r25, 0xFE	; 254
     fde:	51 05       	cpc	r21, r1
     fe0:	68 f0       	brcs	.+26     	; 0xffc <__divsf3_pse+0x82>
     fe2:	b6 c0       	rjmp	.+364    	; 0x1150 <__fp_inf>
     fe4:	00 c1       	rjmp	.+512    	; 0x11e6 <__fp_szero>
     fe6:	5f 3f       	cpi	r21, 0xFF	; 255
     fe8:	ec f3       	brlt	.-6      	; 0xfe4 <__divsf3_pse+0x6a>
     fea:	98 3e       	cpi	r25, 0xE8	; 232
     fec:	dc f3       	brlt	.-10     	; 0xfe4 <__divsf3_pse+0x6a>
     fee:	86 95       	lsr	r24
     ff0:	77 95       	ror	r23
     ff2:	67 95       	ror	r22
     ff4:	b7 95       	ror	r27
     ff6:	f7 95       	ror	r31
     ff8:	9f 5f       	subi	r25, 0xFF	; 255
     ffa:	c9 f7       	brne	.-14     	; 0xfee <__divsf3_pse+0x74>
     ffc:	88 0f       	add	r24, r24
     ffe:	91 1d       	adc	r25, r1
    1000:	96 95       	lsr	r25
    1002:	87 95       	ror	r24
    1004:	97 f9       	bld	r25, 7
    1006:	08 95       	ret
    1008:	e1 e0       	ldi	r30, 0x01	; 1
    100a:	66 0f       	add	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	bb 1f       	adc	r27, r27
    1012:	62 17       	cp	r22, r18
    1014:	73 07       	cpc	r23, r19
    1016:	84 07       	cpc	r24, r20
    1018:	ba 07       	cpc	r27, r26
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__divsf3_pse+0xaa>
    101c:	62 1b       	sub	r22, r18
    101e:	73 0b       	sbc	r23, r19
    1020:	84 0b       	sbc	r24, r20
    1022:	ba 0b       	sbc	r27, r26
    1024:	ee 1f       	adc	r30, r30
    1026:	88 f7       	brcc	.-30     	; 0x100a <__divsf3_pse+0x90>
    1028:	e0 95       	com	r30
    102a:	08 95       	ret

0000102c <__fixsfsi>:
    102c:	04 d0       	rcall	.+8      	; 0x1036 <__fixunssfsi>
    102e:	68 94       	set
    1030:	b1 11       	cpse	r27, r1
    1032:	d9 c0       	rjmp	.+434    	; 0x11e6 <__fp_szero>
    1034:	08 95       	ret

00001036 <__fixunssfsi>:
    1036:	bc d0       	rcall	.+376    	; 0x11b0 <__fp_splitA>
    1038:	88 f0       	brcs	.+34     	; 0x105c <__fixunssfsi+0x26>
    103a:	9f 57       	subi	r25, 0x7F	; 127
    103c:	90 f0       	brcs	.+36     	; 0x1062 <__fixunssfsi+0x2c>
    103e:	b9 2f       	mov	r27, r25
    1040:	99 27       	eor	r25, r25
    1042:	b7 51       	subi	r27, 0x17	; 23
    1044:	a0 f0       	brcs	.+40     	; 0x106e <__fixunssfsi+0x38>
    1046:	d1 f0       	breq	.+52     	; 0x107c <__fixunssfsi+0x46>
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	1a f0       	brmi	.+6      	; 0x1058 <__fixunssfsi+0x22>
    1052:	ba 95       	dec	r27
    1054:	c9 f7       	brne	.-14     	; 0x1048 <__fixunssfsi+0x12>
    1056:	12 c0       	rjmp	.+36     	; 0x107c <__fixunssfsi+0x46>
    1058:	b1 30       	cpi	r27, 0x01	; 1
    105a:	81 f0       	breq	.+32     	; 0x107c <__fixunssfsi+0x46>
    105c:	c3 d0       	rcall	.+390    	; 0x11e4 <__fp_zero>
    105e:	b1 e0       	ldi	r27, 0x01	; 1
    1060:	08 95       	ret
    1062:	c0 c0       	rjmp	.+384    	; 0x11e4 <__fp_zero>
    1064:	67 2f       	mov	r22, r23
    1066:	78 2f       	mov	r23, r24
    1068:	88 27       	eor	r24, r24
    106a:	b8 5f       	subi	r27, 0xF8	; 248
    106c:	39 f0       	breq	.+14     	; 0x107c <__fixunssfsi+0x46>
    106e:	b9 3f       	cpi	r27, 0xF9	; 249
    1070:	cc f3       	brlt	.-14     	; 0x1064 <__fixunssfsi+0x2e>
    1072:	86 95       	lsr	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	b3 95       	inc	r27
    107a:	d9 f7       	brne	.-10     	; 0x1072 <__fixunssfsi+0x3c>
    107c:	3e f4       	brtc	.+14     	; 0x108c <__fixunssfsi+0x56>
    107e:	90 95       	com	r25
    1080:	80 95       	com	r24
    1082:	70 95       	com	r23
    1084:	61 95       	neg	r22
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	08 95       	ret

0000108e <__floatunsisf>:
    108e:	e8 94       	clt
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <__floatsisf+0x12>

00001092 <__floatsisf>:
    1092:	97 fb       	bst	r25, 7
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__floatsisf+0x12>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	99 23       	and	r25, r25
    10a6:	a9 f0       	breq	.+42     	; 0x10d2 <__floatsisf+0x40>
    10a8:	f9 2f       	mov	r31, r25
    10aa:	96 e9       	ldi	r25, 0x96	; 150
    10ac:	bb 27       	eor	r27, r27
    10ae:	93 95       	inc	r25
    10b0:	f6 95       	lsr	r31
    10b2:	87 95       	ror	r24
    10b4:	77 95       	ror	r23
    10b6:	67 95       	ror	r22
    10b8:	b7 95       	ror	r27
    10ba:	f1 11       	cpse	r31, r1
    10bc:	f8 cf       	rjmp	.-16     	; 0x10ae <__floatsisf+0x1c>
    10be:	fa f4       	brpl	.+62     	; 0x10fe <__floatsisf+0x6c>
    10c0:	bb 0f       	add	r27, r27
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <__floatsisf+0x36>
    10c4:	60 ff       	sbrs	r22, 0
    10c6:	1b c0       	rjmp	.+54     	; 0x10fe <__floatsisf+0x6c>
    10c8:	6f 5f       	subi	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	16 c0       	rjmp	.+44     	; 0x10fe <__floatsisf+0x6c>
    10d2:	88 23       	and	r24, r24
    10d4:	11 f0       	breq	.+4      	; 0x10da <__floatsisf+0x48>
    10d6:	96 e9       	ldi	r25, 0x96	; 150
    10d8:	11 c0       	rjmp	.+34     	; 0x10fc <__floatsisf+0x6a>
    10da:	77 23       	and	r23, r23
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <__floatsisf+0x54>
    10de:	9e e8       	ldi	r25, 0x8E	; 142
    10e0:	87 2f       	mov	r24, r23
    10e2:	76 2f       	mov	r23, r22
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <__floatsisf+0x5e>
    10e6:	66 23       	and	r22, r22
    10e8:	71 f0       	breq	.+28     	; 0x1106 <__stack+0x7>
    10ea:	96 e8       	ldi	r25, 0x86	; 134
    10ec:	86 2f       	mov	r24, r22
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	2a f0       	brmi	.+10     	; 0x10fe <__floatsisf+0x6c>
    10f4:	9a 95       	dec	r25
    10f6:	66 0f       	add	r22, r22
    10f8:	77 1f       	adc	r23, r23
    10fa:	88 1f       	adc	r24, r24
    10fc:	da f7       	brpl	.-10     	; 0x10f4 <__floatsisf+0x62>
    10fe:	88 0f       	add	r24, r24
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__fp_cmp>:
    1108:	99 0f       	add	r25, r25
    110a:	00 08       	sbc	r0, r0
    110c:	55 0f       	add	r21, r21
    110e:	aa 0b       	sbc	r26, r26
    1110:	e0 e8       	ldi	r30, 0x80	; 128
    1112:	fe ef       	ldi	r31, 0xFE	; 254
    1114:	16 16       	cp	r1, r22
    1116:	17 06       	cpc	r1, r23
    1118:	e8 07       	cpc	r30, r24
    111a:	f9 07       	cpc	r31, r25
    111c:	c0 f0       	brcs	.+48     	; 0x114e <__fp_cmp+0x46>
    111e:	12 16       	cp	r1, r18
    1120:	13 06       	cpc	r1, r19
    1122:	e4 07       	cpc	r30, r20
    1124:	f5 07       	cpc	r31, r21
    1126:	98 f0       	brcs	.+38     	; 0x114e <__fp_cmp+0x46>
    1128:	62 1b       	sub	r22, r18
    112a:	73 0b       	sbc	r23, r19
    112c:	84 0b       	sbc	r24, r20
    112e:	95 0b       	sbc	r25, r21
    1130:	39 f4       	brne	.+14     	; 0x1140 <__fp_cmp+0x38>
    1132:	0a 26       	eor	r0, r26
    1134:	61 f0       	breq	.+24     	; 0x114e <__fp_cmp+0x46>
    1136:	23 2b       	or	r18, r19
    1138:	24 2b       	or	r18, r20
    113a:	25 2b       	or	r18, r21
    113c:	21 f4       	brne	.+8      	; 0x1146 <__fp_cmp+0x3e>
    113e:	08 95       	ret
    1140:	0a 26       	eor	r0, r26
    1142:	09 f4       	brne	.+2      	; 0x1146 <__fp_cmp+0x3e>
    1144:	a1 40       	sbci	r26, 0x01	; 1
    1146:	a6 95       	lsr	r26
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	81 1d       	adc	r24, r1
    114c:	81 1d       	adc	r24, r1
    114e:	08 95       	ret

00001150 <__fp_inf>:
    1150:	97 f9       	bld	r25, 7
    1152:	9f 67       	ori	r25, 0x7F	; 127
    1154:	80 e8       	ldi	r24, 0x80	; 128
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	08 95       	ret

0000115c <__fp_nan>:
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	80 ec       	ldi	r24, 0xC0	; 192
    1160:	08 95       	ret

00001162 <__fp_pscA>:
    1162:	00 24       	eor	r0, r0
    1164:	0a 94       	dec	r0
    1166:	16 16       	cp	r1, r22
    1168:	17 06       	cpc	r1, r23
    116a:	18 06       	cpc	r1, r24
    116c:	09 06       	cpc	r0, r25
    116e:	08 95       	ret

00001170 <__fp_pscB>:
    1170:	00 24       	eor	r0, r0
    1172:	0a 94       	dec	r0
    1174:	12 16       	cp	r1, r18
    1176:	13 06       	cpc	r1, r19
    1178:	14 06       	cpc	r1, r20
    117a:	05 06       	cpc	r0, r21
    117c:	08 95       	ret

0000117e <__fp_round>:
    117e:	09 2e       	mov	r0, r25
    1180:	03 94       	inc	r0
    1182:	00 0c       	add	r0, r0
    1184:	11 f4       	brne	.+4      	; 0x118a <__fp_round+0xc>
    1186:	88 23       	and	r24, r24
    1188:	52 f0       	brmi	.+20     	; 0x119e <__fp_round+0x20>
    118a:	bb 0f       	add	r27, r27
    118c:	40 f4       	brcc	.+16     	; 0x119e <__fp_round+0x20>
    118e:	bf 2b       	or	r27, r31
    1190:	11 f4       	brne	.+4      	; 0x1196 <__fp_round+0x18>
    1192:	60 ff       	sbrs	r22, 0
    1194:	04 c0       	rjmp	.+8      	; 0x119e <__fp_round+0x20>
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	8f 4f       	sbci	r24, 0xFF	; 255
    119c:	9f 4f       	sbci	r25, 0xFF	; 255
    119e:	08 95       	ret

000011a0 <__fp_split3>:
    11a0:	57 fd       	sbrc	r21, 7
    11a2:	90 58       	subi	r25, 0x80	; 128
    11a4:	44 0f       	add	r20, r20
    11a6:	55 1f       	adc	r21, r21
    11a8:	59 f0       	breq	.+22     	; 0x11c0 <__fp_splitA+0x10>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__fp_splitA+0x1a>
    11ae:	47 95       	ror	r20

000011b0 <__fp_splitA>:
    11b0:	88 0f       	add	r24, r24
    11b2:	97 fb       	bst	r25, 7
    11b4:	99 1f       	adc	r25, r25
    11b6:	61 f0       	breq	.+24     	; 0x11d0 <__fp_splitA+0x20>
    11b8:	9f 3f       	cpi	r25, 0xFF	; 255
    11ba:	79 f0       	breq	.+30     	; 0x11da <__fp_splitA+0x2a>
    11bc:	87 95       	ror	r24
    11be:	08 95       	ret
    11c0:	12 16       	cp	r1, r18
    11c2:	13 06       	cpc	r1, r19
    11c4:	14 06       	cpc	r1, r20
    11c6:	55 1f       	adc	r21, r21
    11c8:	f2 cf       	rjmp	.-28     	; 0x11ae <__fp_split3+0xe>
    11ca:	46 95       	lsr	r20
    11cc:	f1 df       	rcall	.-30     	; 0x11b0 <__fp_splitA>
    11ce:	08 c0       	rjmp	.+16     	; 0x11e0 <__fp_splitA+0x30>
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	f1 cf       	rjmp	.-30     	; 0x11bc <__fp_splitA+0xc>
    11da:	86 95       	lsr	r24
    11dc:	71 05       	cpc	r23, r1
    11de:	61 05       	cpc	r22, r1
    11e0:	08 94       	sec
    11e2:	08 95       	ret

000011e4 <__fp_zero>:
    11e4:	e8 94       	clt

000011e6 <__fp_szero>:
    11e6:	bb 27       	eor	r27, r27
    11e8:	66 27       	eor	r22, r22
    11ea:	77 27       	eor	r23, r23
    11ec:	cb 01       	movw	r24, r22
    11ee:	97 f9       	bld	r25, 7
    11f0:	08 95       	ret

000011f2 <__gesf2>:
    11f2:	8a df       	rcall	.-236    	; 0x1108 <__fp_cmp>
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <__gesf2+0x6>
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__mulsf3>:
    11fa:	0b d0       	rcall	.+22     	; 0x1212 <__mulsf3x>
    11fc:	c0 cf       	rjmp	.-128    	; 0x117e <__fp_round>
    11fe:	b1 df       	rcall	.-158    	; 0x1162 <__fp_pscA>
    1200:	28 f0       	brcs	.+10     	; 0x120c <__mulsf3+0x12>
    1202:	b6 df       	rcall	.-148    	; 0x1170 <__fp_pscB>
    1204:	18 f0       	brcs	.+6      	; 0x120c <__mulsf3+0x12>
    1206:	95 23       	and	r25, r21
    1208:	09 f0       	breq	.+2      	; 0x120c <__mulsf3+0x12>
    120a:	a2 cf       	rjmp	.-188    	; 0x1150 <__fp_inf>
    120c:	a7 cf       	rjmp	.-178    	; 0x115c <__fp_nan>
    120e:	11 24       	eor	r1, r1
    1210:	ea cf       	rjmp	.-44     	; 0x11e6 <__fp_szero>

00001212 <__mulsf3x>:
    1212:	c6 df       	rcall	.-116    	; 0x11a0 <__fp_split3>
    1214:	a0 f3       	brcs	.-24     	; 0x11fe <__mulsf3+0x4>

00001216 <__mulsf3_pse>:
    1216:	95 9f       	mul	r25, r21
    1218:	d1 f3       	breq	.-12     	; 0x120e <__mulsf3+0x14>
    121a:	95 0f       	add	r25, r21
    121c:	50 e0       	ldi	r21, 0x00	; 0
    121e:	55 1f       	adc	r21, r21
    1220:	62 9f       	mul	r22, r18
    1222:	f0 01       	movw	r30, r0
    1224:	72 9f       	mul	r23, r18
    1226:	bb 27       	eor	r27, r27
    1228:	f0 0d       	add	r31, r0
    122a:	b1 1d       	adc	r27, r1
    122c:	63 9f       	mul	r22, r19
    122e:	aa 27       	eor	r26, r26
    1230:	f0 0d       	add	r31, r0
    1232:	b1 1d       	adc	r27, r1
    1234:	aa 1f       	adc	r26, r26
    1236:	64 9f       	mul	r22, r20
    1238:	66 27       	eor	r22, r22
    123a:	b0 0d       	add	r27, r0
    123c:	a1 1d       	adc	r26, r1
    123e:	66 1f       	adc	r22, r22
    1240:	82 9f       	mul	r24, r18
    1242:	22 27       	eor	r18, r18
    1244:	b0 0d       	add	r27, r0
    1246:	a1 1d       	adc	r26, r1
    1248:	62 1f       	adc	r22, r18
    124a:	73 9f       	mul	r23, r19
    124c:	b0 0d       	add	r27, r0
    124e:	a1 1d       	adc	r26, r1
    1250:	62 1f       	adc	r22, r18
    1252:	83 9f       	mul	r24, r19
    1254:	a0 0d       	add	r26, r0
    1256:	61 1d       	adc	r22, r1
    1258:	22 1f       	adc	r18, r18
    125a:	74 9f       	mul	r23, r20
    125c:	33 27       	eor	r19, r19
    125e:	a0 0d       	add	r26, r0
    1260:	61 1d       	adc	r22, r1
    1262:	23 1f       	adc	r18, r19
    1264:	84 9f       	mul	r24, r20
    1266:	60 0d       	add	r22, r0
    1268:	21 1d       	adc	r18, r1
    126a:	82 2f       	mov	r24, r18
    126c:	76 2f       	mov	r23, r22
    126e:	6a 2f       	mov	r22, r26
    1270:	11 24       	eor	r1, r1
    1272:	9f 57       	subi	r25, 0x7F	; 127
    1274:	50 40       	sbci	r21, 0x00	; 0
    1276:	8a f0       	brmi	.+34     	; 0x129a <__mulsf3_pse+0x84>
    1278:	e1 f0       	breq	.+56     	; 0x12b2 <__mulsf3_pse+0x9c>
    127a:	88 23       	and	r24, r24
    127c:	4a f0       	brmi	.+18     	; 0x1290 <__mulsf3_pse+0x7a>
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	bb 1f       	adc	r27, r27
    1284:	66 1f       	adc	r22, r22
    1286:	77 1f       	adc	r23, r23
    1288:	88 1f       	adc	r24, r24
    128a:	91 50       	subi	r25, 0x01	; 1
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	a9 f7       	brne	.-22     	; 0x127a <__mulsf3_pse+0x64>
    1290:	9e 3f       	cpi	r25, 0xFE	; 254
    1292:	51 05       	cpc	r21, r1
    1294:	70 f0       	brcs	.+28     	; 0x12b2 <__mulsf3_pse+0x9c>
    1296:	5c cf       	rjmp	.-328    	; 0x1150 <__fp_inf>
    1298:	a6 cf       	rjmp	.-180    	; 0x11e6 <__fp_szero>
    129a:	5f 3f       	cpi	r21, 0xFF	; 255
    129c:	ec f3       	brlt	.-6      	; 0x1298 <__mulsf3_pse+0x82>
    129e:	98 3e       	cpi	r25, 0xE8	; 232
    12a0:	dc f3       	brlt	.-10     	; 0x1298 <__mulsf3_pse+0x82>
    12a2:	86 95       	lsr	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f7 95       	ror	r31
    12ac:	e7 95       	ror	r30
    12ae:	9f 5f       	subi	r25, 0xFF	; 255
    12b0:	c1 f7       	brne	.-16     	; 0x12a2 <__mulsf3_pse+0x8c>
    12b2:	fe 2b       	or	r31, r30
    12b4:	88 0f       	add	r24, r24
    12b6:	91 1d       	adc	r25, r1
    12b8:	96 95       	lsr	r25
    12ba:	87 95       	ror	r24
    12bc:	97 f9       	bld	r25, 7
    12be:	08 95       	ret

000012c0 <_exit>:
    12c0:	f8 94       	cli

000012c2 <__stop_program>:
    12c2:	ff cf       	rjmp	.-2      	; 0x12c2 <__stop_program>
